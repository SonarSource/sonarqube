import static org.gradle.api.JavaVersion.VERSION_17

// Ordered alphabetically
plugins {
  id 'com.github.hierynomus.license' version '0.16.1'
  id 'com.github.hierynomus.license-report' version '0.16.1' apply false
  id 'com.google.protobuf' version '0.8.19' apply false
  id 'com.gradleup.shadow' version '8.3.6' apply false
  id 'com.jfrog.artifactory' version '5.2.5' // dont update new version contains a bug
  id 'de.undercouch.download' version '5.6.0' apply false
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.cyclonedx.bom' version '2.3.1' apply false
  id 'org.sonarqube' version '6.2.0.5505'
}

if (!JavaVersion.current().isCompatibleWith(VERSION_17)) {
  throw new GradleException("JDK 17+ is required to perform this build. It's currently " + System.getProperty("java.home") + ".")
}

sonar {
  properties {
    property 'sonar.projectName', projectTitle
    property 'sonar.projectVersion', "${versionInSources}-SNAPSHOT"
    property 'sonar.buildString', version
  }
}

tasks.named('wrapper') {
  distributionType = Wrapper.DistributionType.ALL
}

gradle.projectsEvaluated { gradle ->
  // yarn_run tasks can't all run in parallel without random issues
  // this script ensure all yarn_run tasks run sequentially
  def yarnRunTasks = allprojects.findResults { it -> it.tasks.findByName('yarn_run') }
  yarnRunTasks.drop(1).eachWithIndex { it, i -> it.mustRunAfter(yarnRunTasks[0..i]) }
}

ext.osAdaptiveCommand = { commands ->
  def newCommands = []

  if (System.properties['os.name'].toLowerCase().contains('windows')) {
    newCommands = ['cmd', '/c']
  }

  newCommands.addAll(commands)

  return newCommands
}

apply from: "$rootDir/gradle/allprojects.gradle"
apply from: "$rootDir/gradle/subprojects.gradle"
