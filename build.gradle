import groovy.text.SimpleTemplateEngine
import org.sonar.build.BlackBoxTest

import static org.gradle.api.JavaVersion.VERSION_17

plugins {
  // Ordered alphabetically
  id 'com.github.hierynomus.license' version '0.16.1'
  id "com.github.hierynomus.license-report" version "0.16.1" apply false
  id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
  id 'com.google.protobuf' version '0.8.19' apply false
  // dont update com.jfrog.artifactory, new version contains a bug
  id 'com.jfrog.artifactory' version '5.1.10'
  id "de.undercouch.download" version "5.6.0" apply false
  id 'io.spring.dependency-management' version '1.1.5'
  id "org.cyclonedx.bom" version "1.7.4" apply false
  id 'org.sonarqube' version '5.0.0.4638'
}

if (!JavaVersion.current().isCompatibleWith(VERSION_17)) {
  throw new GradleException("JDK 17+ is required to perform this build. It's currently " + System.getProperty("java.home") + ".")
}

/**
 * The BOM related tasks are disabled by default, activated by:
 * - running in the CI and being on a main branch or a nightly build,
 * - or using '-Dbom' project property
 * - or by explicit call to 'cyclonedxBom' Gradle task
 */
def bomTasks = "cyclonedxBom"
def ghBranch = System.getenv()["GITHUB_BRANCH"]
def isMainBranch = ghBranch in ['master'] || ghBranch ==~ 'branch-[\\d.]+'

boolean enableBom = System.getenv('CI') == "true" && (isMainBranch) ||
        System.getProperty("bom") != null ||
        gradle.startParameter.taskNames.findAll({ it.matches(".*:($bomTasks)") })

allprojects {
  apply plugin: 'com.jfrog.artifactory'
  apply plugin: 'maven-publish'

  ext.versionInSources = version
  ext.buildNumber = System.getProperty("buildNumber")
  // when no buildNumber is provided, then project version must end with '-SNAPSHOT'
  if (ext.buildNumber == null) {
      version = "${version}-SNAPSHOT".toString()
      ext.versionWithoutBuildNumber = version
  } else {
      ext.versionWithoutBuildNumber = version
      version = (version.toString().count('.') == 1 ? "${version}.0.${ext.buildNumber}" : "${version}.${ext.buildNumber}").toString()
  }

  task cacheDependencies {
    doLast {
      configurations.each { conf ->
        if (conf.isCanBeResolved()) {
          if (conf.getName() != 'appZip')
            conf.resolve()
        }
      }
    }
  }

  ext {
    release = project.hasProperty('release') && project.getProperty('release')
    official = project.hasProperty('official') && project.getProperty('official')
  }

  ext.enableBom = enableBom
  if (!enableBom) {
    tasks.matching { it.name.matches(bomTasks) }.all({
      logger.info("{} disabled", it.name);
      it.enabled = false
    })
  }

  repositories {
    def repository = project.hasProperty('qa') ? 'sonarsource-qa' : 'sonarsource'
    // The environment variables ARTIFACTORY_PRIVATE_USERNAME and ARTIFACTORY_PRIVATE_PASSWORD are used on QA env (Jenkins)
    // On local box, please add artifactoryUsername and artifactoryPassword to ~/.gradle/gradle.properties
    def artifactoryUsername = System.env.'ARTIFACTORY_PRIVATE_USERNAME' ?: (project.hasProperty('artifactoryUsername') ? project.getProperty('artifactoryUsername') : '')
    def artifactoryPassword = System.env.'ARTIFACTORY_PRIVATE_PASSWORD' ?: (project.hasProperty('artifactoryPassword') ? project.getProperty('artifactoryPassword') : '')
    def artifactoryUrl = System.getenv('ARTIFACTORY_URL') ?: (project.hasProperty('artifactoryUrl') ? project.getProperty('artifactoryUrl') : '')

    if (artifactoryPassword) {
      if (artifactoryUrl == '') {
        throw new GradleException('Invalid artifactoryUrl')
      }
      maven {
        authentication {
          header(HttpHeaderAuthentication)
        }
        credentials(HttpHeaderCredentials) {
          name = "Authorization"
          value = "Bearer $artifactoryPassword"
        }
        url "${artifactoryUrl}/${repository}"
      }
    } else {
      mavenLocal()
      mavenCentral()
      maven {
        url 'https://jitpack.io'
      }
      maven {
        url 'https://maven.codelibs.org/'
      }
    }
    ivy {
          if (artifactoryUsername && artifactoryPassword) {
              url "${artifactoryUrl}/sonarsource-bucket"
              authentication {
                header(HttpHeaderAuthentication)
              }
              credentials(HttpHeaderCredentials) {
                name = "Authorization"
                value = "Bearer $artifactoryPassword"
              }

              patternLayout {
                artifact '/[organisation]/[module]/[module]-[revision].[ext]'
              }
          } else {
              // For public build
              url "https://artifacts.elastic.co/downloads/"

              patternLayout {
                artifact '/[organisation]/[module]-[revision].[ext]'
              }
          }

          metadataSources { artifact() }
    }

    maven {
      def autorabitRepository = System.env.'ARTIFACTORY_CODESCAN_REPO' ?: (project.hasProperty('artifactoryRepo') ? project.getProperty('artifactoryRepo') : 'libs-release-local')
      url "https://artifactory.autorabit.com/artifactory/${autorabitRepository}"
      credentials {
         username = System.env.'ARTIFACTORY_USER' ?: (project.hasProperty('artifactoryUsername') ? project.getProperty('artifactoryUsername') : '')
         password = System.env.'ARTIFACTORY_PWD' ?: (project.hasProperty('artifactoryPassword') ? project.getProperty('artifactoryPassword') : '')
      }
    }
    mavenLocal()
    mavenCentral()
    maven {
      url 'https://jitpack.io'
    }
  }

  task allDependencies {
    dependsOn 'dependencies'
  }

  artifactory {
    clientConfig.setIncludeEnvVars(true)
    clientConfig.setEnvVarsExcludePatterns('*pass*,*psw*,*secret*,*MAVEN_CMD_LINE_ARGS*,sun.java.command,*token*,*login*,*key*,*signing*,*auth*,*pwd*')
    contextUrl = System.getenv('ARTIFACTORY_URL') ?: 'https://artifactory.autorabit.com/artifactory/'
    publish {
      repository {
        repoKey = System.env.'ARTIFACTORY_CODESCAN_REPO' ?: (project.hasProperty('artifactoryRepo') ? project.getProperty('artifactoryRepo') : 'libs-release-local')
        username = System.env.'ARTIFACTORY_USER' ?: (project.hasProperty('artifactoryUsername') ? project.getProperty('artifactoryUsername') : '')
        password = System.env.'ARTIFACTORY_PWD' ?: (project.hasProperty('artifactoryPassword') ? project.getProperty('artifactoryPassword') : '')
      }
      defaults {
        properties = [
            'build.name': 'codescan-cloud',
            'build.number': System.getenv('BUILD_NUMBER'),
            'pr.branch.target': System.getenv('GITHUB_BASE_BRANCH'),
            'pr.number': System.getenv('PULL_REQUEST'),
            'vcs.branch': ghBranch,
            'vcs.revision': System.getenv('GIT_SHA1'),
            'version': version
        ]
        publications('mavenJava')
        publishPom = true
        publishIvy = false
      }
    }
    clientConfig.info.setBuildName('codescan-cloud')
    clientConfig.info.setBuildNumber(System.getenv('BUILD_NUMBER'))
    // Define the artifacts to be deployed to https://binaries.sonarsource.com on releases
    clientConfig.info.addEnvironmentProperty('ARTIFACTS_TO_PUBLISH', "${project.group}:codescan-application:zip")
    // The name of this variable is important because it's used by the delivery process when extracting version from Artifactory build info.
    clientConfig.info.addEnvironmentProperty('PROJECT_VERSION', "${version}")
  }
}

apply plugin: 'org.sonarqube'
sonar {
    properties {
        property 'sonar.projectName', projectTitle
        property 'sonar.projectVersion', "${versionInSources}-SNAPSHOT"
        property 'sonar.buildString', version
    }
}

tasks.named('wrapper') {
    distributionType = Wrapper.DistributionType.ALL
}

subprojects {
  apply plugin: 'com.github.hierynomus.license'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'jacoco'
  apply plugin: 'java-library'
  apply plugin: 'idea'
  apply plugin: 'signing'

  // do not deploy to Artifactory by default
  artifactoryPublish.skip = true

  compileJava.options.encoding = "UTF-8"
  compileTestJava.options.encoding = "UTF-8"

  def testFixtureSrc = 'src/testFixtures'
  if (file(testFixtureSrc).exists()) {
    apply plugin: 'java-test-fixtures'
  }

  ext {
    protobufVersion = '3.25.5'
    springVersion = '5.3.39'
    elasticSearchClientVersion = '7.17.22'
  }

  sonar {
    properties {
      property 'sonar.moduleKey', project.group + ':' + project.name
    }
  }

  sourceSets {
    test {
      resources {
        srcDirs += ['src/it/resources']
      }
      java {
        srcDirs += ['src/it/java']
      }
    }

    bbt {
      resources {
        srcDirs = ['src/bbt/resources']
      }
      java {
        srcDirs = ['src/bbt/java']
      }
    }
  }

  // Central place for definition dependency versions and exclusions.
  dependencyManagement {
    dependencies {
      // bundled plugin list -- keep it alphabetically ordered
      dependency 'com.sonarsource.abap:sonar-abap-plugin:3.14.0.5470'
      dependency 'com.sonarsource.cobol:sonar-cobol-plugin:5.7.0.8061'
      dependency 'com.sonarsource.cpp:sonar-cfamily-dependencies-plugin:6.59.0.75237'
      dependency 'com.sonarsource.cpp:sonar-cfamily-plugin:6.59.0.75237'
      dependency 'com.sonarsource.dart:sonar-dart-plugin:0.2.0.1567'
      dependency 'com.sonarsource.dbd:sonar-dbd-plugin:1.31.0.11180'
      dependency 'com.sonarsource.dbd:sonar-dbd-java-frontend-plugin:1.31.0.11180'
      dependency 'com.sonarsource.dbd:sonar-dbd-python-frontend-plugin:1.31.0.11180'
      dependency 'com.sonarsource.pli:sonar-pli-plugin:1.15.0.4810'
      dependency 'com.sonarsource.plsql:sonar-plsql-plugin:3.14.0.6845'
      dependency 'com.sonarsource.plugins.vb:sonar-vb-plugin:2.13.0.5130'
      dependency 'com.sonarsource.rpg:sonar-rpg-plugin:3.9.0.5001'
      dependency 'com.sonarsource.security:sonar-security-csharp-frontend-plugin:10.7.0.32997'
      dependency 'com.sonarsource.security:sonar-security-java-frontend-plugin:10.7.0.32997'
      dependency 'com.sonarsource.security:sonar-security-php-frontend-plugin:10.7.0.32997'
      dependency 'com.sonarsource.security:sonar-security-plugin:10.7.0.32997'
      dependency 'com.sonarsource.security:sonar-security-python-frontend-plugin:10.7.0.32997'
      dependency 'com.sonarsource.security:sonar-security-js-frontend-plugin:10.7.0.32997'
      dependency 'com.sonarsource.slang:sonar-apex-plugin:1.17.1.109'
      dependency 'org.sonarsource.slang:sonar-go-plugin:1.17.1.145'
      dependency 'org.sonarsource.slang:sonar-ruby-plugin:1.17.1.134'
      dependency 'org.sonarsource.slang:sonar-scala-plugin:1.17.1.166'
      dependency 'com.sonarsource.swift:sonar-swift-plugin:4.12.0.7262'
      dependency 'com.sonarsource.tsql:sonar-tsql-plugin:1.13.0.7207'
      dependency 'org.sonarsource.dotnet:sonar-csharp-plugin:9.32.0.97167'
      dependency 'org.sonarsource.dotnet:sonar-vbnet-plugin:9.32.0.97167'
      dependency 'org.sonarsource.flex:sonar-flex-plugin:2.12.0.4568'
      dependency 'org.sonarsource.html:sonar-html-plugin:3.16.0.5274'
      dependency 'org.sonarsource.jacoco:sonar-jacoco-plugin:1.3.0.1538'
      dependency 'org.sonarsource.java:sonar-java-plugin:8.2.0.36672'
      dependency 'org.sonarsource.java:sonar-java-symbolic-execution-plugin:8.2.0.36672'
      dependency 'org.sonarsource.javascript:sonar-javascript-plugin:10.16.0.27621'
      dependency 'org.sonarsource.php:sonar-php-plugin:3.38.0.12239'
      dependency 'org.sonarsource.plugins.cayc:sonar-cayc-plugin:2.4.0.2018'
      dependency 'org.sonarsource.python:sonar-python-plugin:4.23.0.17664'
      dependency 'org.sonarsource.kotlin:sonar-kotlin-plugin:2.20.0.4382'
      dependency "org.sonarsource.api.plugin:sonar-plugin-api:$pluginApiVersion"
      dependency "org.sonarsource.api.plugin:sonar-plugin-api-test-fixtures:$pluginApiVersion"
      dependency 'org.sonarsource.xml:sonar-xml-plugin:2.10.0.4108'
      dependency 'org.sonarsource.iac:sonar-iac-plugin:1.36.0.12431'
      dependency 'org.sonarsource.text:sonar-text-plugin:2.16.0.4008'
      dependency 'com.sonarsource.text:sonar-text-enterprise-plugin:2.16.0.4008'
      dependency 'com.sonarsource.jcl:sonar-jcl-plugin:1.3.0.1243'

      // please keep this list alphabetically ordered
      dependencySet(group: 'ch.qos.logback', version: '1.3.14') {
        entry 'logback-classic'
        entry 'logback-core'
      }
      // TODO switch to dependency 'ch.qos.logback.access:tomcat:2.0.1' when upgrading to Tomcat 10+
      dependency 'ch.qos.logback:logback-access:1.3.14'
      dependency('commons-beanutils:commons-beanutils:1.9.4') {
        exclude 'commons-logging:commons-logging'
      }
      dependency 'commons-codec:commons-codec:1.17.0'
      dependency 'commons-dbutils:commons-dbutils:1.8.1'
      dependency 'commons-io:commons-io:2.17.0'
      imports { mavenBom 'com.fasterxml.jackson:jackson-bom:2.17.1' }
      dependency 'com.eclipsesource.minimal-json:minimal-json:0.9.5'
      dependencySet(group: 'com.github.scribejava', version: '8.3.3') {
        entry 'scribejava-apis'
        entry 'scribejava-core'
      }
      dependency('com.github.erosb:json-sKema:0.15.0') {
        // this version of json-sKema does not make use of commons-collections, so we can exclude it safely
        exclude 'commons-collections:commons-collections'
      }
      // This project is no longer maintained and was forked
      // by https://github.com/java-diff-utils/java-diff-utils
      // (io.github.java-diff-utils:java-diff-utils).
      dependency 'com.googlecode.java-diff-utils:diffutils:1.3.0'
      dependency('com.googlecode.json-simple:json-simple:1.1.1') {
        exclude 'junit:junit'
      }
      dependency 'com.squareup.okio:okio:3.9.0'
      dependency 'io.github.hakky54:sslcontext-kickstart:8.3.6'
      dependency 'io.prometheus:simpleclient:0.16.0'
      dependency 'io.prometheus:simpleclient_common:0.16.0'
      dependency 'io.prometheus:simpleclient_servlet:0.16.0'
      dependency 'com.github.spotbugs:spotbugs-annotations:4.8.6'
      dependency 'com.google.code.gson:gson:2.11.0'
      dependency('com.google.guava:guava:33.2.1-jre') {
        exclude 'com.google.errorprone:error_prone_annotations'
        exclude 'com.google.guava:listenablefuture'
        exclude 'com.google.j2objc:j2objc-annotations'
        exclude 'org.checkerframework:checker-qual'
        exclude 'org.codehaus.mojo:animal-sniffer-annotations'
      }
      dependency "com.google.protobuf:protobuf-java:${protobufVersion}"
      dependency 'com.h2database:h2:2.2.224'
      dependencySet(group: 'com.hazelcast', version: '5.4.0') {
        entry 'hazelcast'
      }
      // Documentation must be updated if mssql-jdbc is updated: https://github.com/SonarSource/sonarqube/commit/03e4773ebf6cba854cdcf57a600095f65f4f53e7
      dependency('com.microsoft.sqlserver:mssql-jdbc:12.6.3.jre11') {
        exclude 'com.fasterxml.jackson.core:jackson-databind'
      }
      dependency 'com.onelogin:java-saml:2.9.0'
      dependency 'com.oracle.database.jdbc:ojdbc11:23.4.0.24.05'
      dependency 'com.datadoghq:dd-java-agent:1.30.1'
      dependency 'org.aspectj:aspectjtools:1.9.22.1'
      // If this gets updated the dependency on okio 3.5.0 should be reviewed
      dependencySet(group: 'com.squareup.okhttp3', version: '4.12.0') {
        entry 'okhttp'
        entry 'mockwebserver'
        entry 'okhttp-tls'
        entry 'logging-interceptor'
      }
      dependency 'commons-logging:commons-logging:1.3.2'
      dependency 'org.json:json:20240303'
      // To be removed after migration to JUnit5 is finished
      dependency 'com.tngtech.java:junit-dataprovider:1.13.1'
      dependency 'com.tngtech.junit.dataprovider:junit-jupiter-params-dataprovider:2.10'
      dependencySet(group: 'io.jsonwebtoken', version: '0.12.6') {
        entry 'jjwt-api'
        entry 'jjwt-impl'
        entry 'jjwt-jackson'
      }
      dependency 'com.auth0:java-jwt:4.4.0'
      dependency 'io.netty:netty-all:4.1.111.Final'
      dependency 'com.sun.mail:jakarta.mail:1.6.7'
      dependency 'javax.annotation:javax.annotation-api:1.3.2'
      dependency 'javax.inject:javax.inject:1'
      dependency 'javax.xml.bind:jaxb-api:2.3.1'
      dependency 'jakarta.servlet:jakarta.servlet-api:4.0.4'
      dependency 'junit:junit:4.13.2'
      // JUnit 5
      dependencySet(group: 'org.junit.jupiter', version: '5.10.2') {
        entry 'junit-jupiter-api'
        entry 'junit-jupiter-engine'
        entry 'junit-jupiter-params'
      }
      dependencySet(group: 'org.junit.vintage', version: '5.10.2') {
        entry 'junit-vintage-engine'
      }
      dependency 'org.junit-pioneer:junit-pioneer:2.2.0'
      dependency 'org.xmlunit:xmlunit-core:2.10.0'
      dependency 'org.xmlunit:xmlunit-matchers:2.10.0'
      dependency 'org.lz4:lz4-java:1.8.0'
      dependency 'org.littleshoot:littleproxy:1.1.2'
      dependency 'net.sf.trove4j:core:3.1.0'
      dependency 'org.awaitility:awaitility:4.2.1'
      dependency 'org.apache.commons:commons-collections4:4.4'
      dependency 'org.apache.commons:commons-csv:1.11.0'
      dependency 'org.apache.commons:commons-lang3:3.14.0'
      dependency 'org.apache.commons:commons-email:1.6.0'
      dependency 'org.apache.commons:commons-text:1.12.0'
      dependency 'org.apache.mina:mina-core:2.2.3'
      dependency 'org.apache.kerby:kerb-simplekdc:2.0.3'
      dependency 'org.apache.kerby:ldap-backend:2.0.3'
      dependency 'commons-logging:commons-logging:1.3.1'
      dependency 'com.zaxxer:HikariCP:5.1.0'
      dependency ('org.apache.directory.server:apacheds-server-integ:2.0.0.AM27') {
        exclude 'log4j:log4j'
      }
      // Be aware that Log4j is used by Elasticsearch client
      dependencySet(group: 'org.apache.logging.log4j', version: '2.23.1') {
        entry 'log4j-core'
        entry 'log4j-api'
        entry 'log4j-to-slf4j'
      }
      dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.90') {
        entry 'tomcat-embed-core'
        entry('tomcat-embed-jasper') {
          exclude 'org.eclipse.jdt.core.compiler:ecj'
        }
      }
      //transitive dependency of SVNKit, to be re-assessed when updating SVNKit
      dependency 'org.apache.sshd:sshd-core:2.13.1'
      dependency 'org.assertj:assertj-core:3.26.0'
      dependency 'org.assertj:assertj-guava:3.26.0'
      dependency 'org.bouncycastle:bcpkix-jdk18on:1.78.1'
      dependency 'org.bouncycastle:bcprov-jdk18on:1.78.1'
      dependency('org.codehaus.sonar:sonar-channel:4.2') {
        exclude 'org.slf4j:slf4j-api'
      }
      dependency 'com.fasterxml.staxmate:staxmate:2.4.1'
      dependencySet(group: 'org.eclipse.jetty', version: '9.4.6.v20170531') {
        entry 'jetty-proxy'
        entry 'jetty-server'
        entry 'jetty-servlet'
      }
      dependency("org.elasticsearch.client:elasticsearch-rest-high-level-client:${elasticSearchClientVersion}") {
        exclude 'org.apache.logging.log4j:log4j-core'
        exclude 'org.elasticsearch:jna'
      }
      dependency "org.elasticsearch.plugin:transport-netty4-client:${elasticSearchClientVersion}"
      dependency 'org.elasticsearch:mocksocket:1.2'
      dependency 'org.eclipse.jgit:org.eclipse.jgit:6.10.0.202406032230-r'
      dependency "org.codelibs.elasticsearch.module:analysis-common:7.17.22"
      dependency "org.codelibs.elasticsearch.module:reindex:7.17.22"
      dependency 'org.tmatesoft.svnkit:svnkit:1.10.11'
      dependency 'org.hamcrest:hamcrest:2.2'
      dependency 'org.jsoup:jsoup:1.17.2'
      dependency 'org.mindrot:jbcrypt:0.4'
      dependency 'net.java.dev.jna:jna:5.12.0'

      dependency('org.mockito:mockito-core:5.12.0') {
        exclude 'org.hamcrest:hamcrest-core'
      }
      dependency('org.mockito:mockito-junit-jupiter:5.12.0') {
        exclude 'org.junit.jupiter:junit-jupiter-api'
      }
      dependency "org.springframework:spring-test:${springVersion}"
      dependency 'org.mybatis:mybatis:3.5.16'
      dependencySet(group: 'org.slf4j', version: '2.0.13') {
        entry 'jcl-over-slf4j'
        entry 'jul-to-slf4j'
        entry 'log4j-over-slf4j'
        entry 'slf4j-api'
      }
      dependency 'org.postgresql:postgresql:42.7.3'
      dependency 'org.reflections:reflections:0.10.2'
      dependency 'org.simpleframework:simple:5.1.6'
      dependency 'org.sonarsource.git.blame:git-files-blame:1.0.3.1673'
      dependency('org.sonarsource.orchestrator:sonar-orchestrator-junit4:4.9.0.1920') {
        exclude 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
      }
      dependency('org.sonarsource.orchestrator:sonar-orchestrator-junit5:4.9.0.1920') {
        exclude 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
      }
      dependency 'org.junit.platform:junit-platform-suite-api:1.10.2'
      dependency 'org.junit.platform:junit-platform-suite-engine:1.10.2'
      dependency 'com.sonarsource.pdfreport:security-report-pdf-generation:1.0.0.98'
      dependency 'org.sonarsource.update-center:sonar-update-center-common:1.32.0.2441'
      dependency("org.springframework:spring-context:${springVersion}") {
        exclude 'commons-logging:commons-logging'
      }
      dependency ("org.springframework:spring-webmvc:${springVersion}") {
          exclude 'commons-logging:commons-logging'
      }
      dependency 'org.springdoc:springdoc-openapi-webmvc-core:1.8.0'
      dependency 'org.subethamail:subethasmtp:3.1.7'
      dependency 'org.yaml:snakeyaml:2.2'
      dependency 'org.hibernate.validator:hibernate-validator:6.2.5.Final'
      dependency 'jakarta.el:jakarta.el-api:3.0.3'
      dependency 'org.glassfish:jakarta.el:3.0.4'
      dependency 'org.kohsuke:github-api:1.322'
      dependency 'org.wiremock:wiremock-standalone:3.7.0'
      dependency 'org.skyscreamer:jsonassert:1.5.1'
      // to be used only in sonar-ws-generator
      dependency ("org.apache.velocity:velocity:1.7") {
        dependency 'commons-collections:commons-collections:3.2.2'
      }
      dependency 'com.google.code.findbugs:jsr305:3.0.2'
      // please keep this list alphabetically ordered
    }
  }

  configurations {
    bbtCompile.extendsFrom testCompile
    bbtRuntime.extendsFrom testRuntime
    bbtImplementation.extendsFrom testImplementation

    // global exclusions
    all {
      // do not conflict with com.sun.mail:javax.mail
      exclude group: 'javax.mail', module: 'mail'
    }
  }

  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.encoding = 'UTF-8'
    title = project.name + ' ' + versionWithoutBuildNumber
  }

  task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
  }

  // generate code before opening project in IDE (Eclipse or Intellij)
  task ide() {
    // empty by default. Dependencies are added to the task
    // when needed (see protobuf modules for example)
  }

  task generatePackageInfo {
    doLast {
      def allPathsContainingJavaFiles = [] as Set

      fileTree('src/main/java/').matching() {
        include "*/**/*.java"
        exclude "*/**/package-info.java"
      }.forEach {
        allPathsContainingJavaFiles << it.toPath().toFile().getParent();
      }

      allPathsContainingJavaFiles.each {
        String packageInfoPath = it + "/package-info.java"
        File packageInfoFile = new File (packageInfoPath)
        if (!packageInfoFile.exists()) {
            logger.info("Creating file: " + packageInfoPath)
            def packageName = packageInfoFile.getParent().replaceAll("[\\\\ /]", ".").takeAfter("src.main.java.");
            String packageInfoContent = applyPackageInfoTemplate(packageName)
            packageInfoFile << packageInfoContent
        }
      }

      def allPackageInfoFiles = [] as Set

      fileTree('src/main/java/').matching() {
        include "*/**/package-info.java"
      }.forEach {
        allPackageInfoFiles << it.toPath().toFile();
      }

      allPackageInfoFiles.forEach {
        File packageInfoFile = it;
        if (!allPathsContainingJavaFiles.contains(packageInfoFile.getParent())) {
          logger.warn("Deleting package info file: " + packageInfoFile)
          packageInfoFile.delete();
        }
      }

    }
  }
  build.dependsOn(generatePackageInfo)
  generatePackageInfo.finalizedBy(licenseFormat)

  jacocoTestReport {
    reports {
      xml.required = true
      csv.required = false
      html.required = false
    }
  }

  normalization {
    runtimeClasspath {
      // Following classpath resources contain volatile data that changes in each CI build (build number, commit id, time),
      // so we exclude them from calculation of build cache key of test tasks:
      ignore 'META-INF/MANIFEST.MF'
      ignore 'sonar-api-version.txt'
      ignore 'sq-version.txt'
    }
  }


  ext.failedTests = []
  test {
    jvmArgs '-Dfile.encoding=UTF8'
    maxHeapSize = '1500m'
    systemProperty 'java.awt.headless', true
    // Some tests are asserting on localized messages or dates
    systemProperty 'user.language', 'en'
    systemProperty 'user.country', 'US'
    environment 'LANGUAGE', 'en_US'
    testLogging {
      events "skipped", "failed" // verbose log for failed and skipped tests (by default the name of the tests are not logged)
      exceptionFormat 'full' // log the full stack trace (default is the 1st line of the stack trace)
    }
    jacoco {
      enabled = true // do not disable recording of code coverage, so that remote Gradle cache entry can be used locally
      includes = ['com.sonar.*', 'com.sonarsource.*', 'org.sonar.*', 'org.sonarqube.*', 'org.sonarsource.*']
    }
    if (project.hasProperty('maxParallelTests')) {
      maxParallelForks = project.maxParallelTests as int
    }
    if (project.hasProperty('parallelTests')) {
      // See https://guides.gradle.org/performance/#parallel_test_execution
      maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    }

     afterTest { descriptor, result ->
        if (result.resultType == TestResult.ResultType.FAILURE) {
            String failedTest = "  ${descriptor.className} > ${descriptor.name}"
            failedTests << failedTest
        }
    }
  }


  gradle.buildFinished {
    if (!failedTests.empty) {
      println "\nFailed tests:"
      failedTests.each { failedTest ->
        println failedTest
      }
      println ""
    }
  }

  def protoMainSrc = 'src/main/protobuf'
  def protoTestSrc = 'src/test/protobuf'
  if (file(protoMainSrc).exists() || file(protoTestSrc).exists()) {
    // protobuf must be applied after java
    apply plugin: 'com.google.protobuf'

    sourceSets.main.proto.srcDir protoMainSrc  // in addition to the default 'src/main/proto'
    sourceSets.test.proto.srcDir protoTestSrc  // in addition to the default 'src/test/proto'
    protobuf {
      protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
      }
    }
    jar {
      exclude('**/*.proto')
    }
    idea {
      module {
        sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/java")
        testSourceDirs += file("${protobuf.generatedFilesBaseDir}/test/java")
        generatedSourceDirs += file("${protobuf.generatedFilesBaseDir}/main/java")
        generatedSourceDirs += file("${protobuf.generatedFilesBaseDir}/test/java")
      }
    }
    ide.dependsOn(['generateProto', 'generateTestProto'])
  }

  if (official) {
    jar {
      // do not break incremental build on non official versions
      manifest {
        attributes(
          'Version': "${version}",
          'Implementation-Build': System.getenv('GIT_SHA1'),
          'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        )
      }
    }
  }

  license {
    header = rootProject.file('HEADER')
    ignoreFailures = project.hasProperty('ignoreLicenseFailures') ? project.getProperty('ignoreLicenseFailures').toBoolean() : true
    strictCheck true
    encoding = 'UTF-8'
    mapping {
      java = 'SLASHSTAR_STYLE'
      js = 'SLASHSTAR_STYLE'
      ts = 'SLASHSTAR_STYLE'
      tsx = 'SLASHSTAR_STYLE'
      css = 'SLASHSTAR_STYLE'
    }
    includes(['**/*.java', '**/*.js', '**/*.ts', '**/*.tsx', '**/*.css'])
  }

  tasks.withType(GenerateModuleMetadata) {
    enabled = false
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        pom {
          name = 'Codescan Cloud'
          description = project.description
          url = 'https://codescan.io'
          organization {
            name = 'AutoRABIT LLC'
            url = 'https://autorabit.com'
          }
          licenses {
            license {
              name = 'GNU LGPL 3'
              url = 'http://www.gnu.org/licenses/lgpl.txt'
              distribution = 'repo'
            }
          }
          scm {
            url = 'https://github.com/codescan-io/sonarqube'
          }
          developers {
            developer {
              id = 'codescan-team'
              name = 'Codescan Team'
            }
          }
        }
      }
    }
  }

  tasks.withType(Test) {
    configurations {
      ddAgent
    }

    dependencies {
      ddAgent 'com.datadoghq:dd-java-agent'
    }

    if (System.getenv('CI') == "true") {
      doFirst {
        ext {
          ddJavaAgent = configurations.ddAgent.resolvedConfiguration.resolvedArtifacts.find { it.name == 'dd-java-agent' }
        }
        jvmArgs "-javaagent:${ddJavaAgent.file}"
        jvmArgs "-Ddatadog.slf4j.simpleLogger.logFile=${project.projectDir}/build/datadog.log"
      }
    }
  }

  tasks.withType(BlackBoxTest) {
    jacoco.enabled = false
    testClassesDirs = sourceSets.bbt.output.classesDirs
    classpath = sourceSets.bbt.runtimeClasspath

    configurations {
      includeInTestResources
    }

    dependencies {
      bbtRuntimeOnly 'com.microsoft.sqlserver:mssql-jdbc'
      bbtRuntimeOnly 'com.oracle.database.jdbc:ojdbc11'
      bbtRuntimeOnly 'org.postgresql:postgresql'
      bbtRuntimeOnly project(':plugins:sonar-xoo-plugin')

      bbtImplementation 'org.sonarsource.orchestrator:sonar-orchestrator-junit4'
      bbtImplementation project(":sonar-testing-harness")
      bbtImplementation project(":private:it-common")
      bbtImplementation testFixtures(project(":sonar-ws"))
    }
  }

  signing {
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    required {
      return isMainBranch && gradle.taskGraph.hasTask(":artifactoryPublish")
    }
    sign publishing.publications
  }

  tasks.withType(Sign) {
    onlyIf {
      return !artifactoryPublish.skip && isMainBranch && gradle.taskGraph.hasTask(":artifactoryPublish")
    }
  }
}

static def applyPackageInfoTemplate(packageName) {
  def engine = new SimpleTemplateEngine()
  def templateText = "@ParametersAreNonnullByDefault\n" +
          "package $packageName;\n" +
          "\n" +
          "import javax.annotation.ParametersAreNonnullByDefault;\n"
  def templateParams = ["packageName": packageName]
  engine.createTemplate(templateText).make(templateParams).toString()
}

gradle.projectsEvaluated { gradle ->
  // yarn_run tasks can't all run in parallel without random issues
  // this script ensure all yarn_run tasks run sequentially
  def yarnRunTasks = allprojects.findResults { it -> it.tasks.findByName('yarn_run') }
  yarnRunTasks.drop(1).eachWithIndex { it, i -> it.mustRunAfter(yarnRunTasks[0..i]) }
}

ext.osAdaptiveCommand = { commands ->
  def newCommands = []

  if (System.properties['os.name'].toLowerCase().contains('windows')) {
    newCommands = ['cmd', '/c']
  }

  newCommands.addAll(commands)

  return newCommands
}
