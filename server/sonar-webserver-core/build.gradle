description = 'SonarQube WebServer-only code'

sonar {
  properties {
    property 'sonar.projectName', "${projectTitle} :: Web Server :: Core"
  }
}

import org.apache.tools.ant.filters.ReplaceTokens
processResources {
  filesMatching('build.properties') {
    filter ReplaceTokens, tokens: [
      'buildNumber': release ? 'git rev-parse HEAD'.execute().text.trim() : 'N/A'
    ]
  }
}

dependencies {
  // please keep the list grouped by configuration and ordered by name

  api 'ch.qos.logback:logback-access'
  api 'ch.qos.logback:logback-classic'
  api 'ch.qos.logback:logback-core'
  api 'com.google.code.gson:gson'
  api 'com.google.protobuf:protobuf-java'
  api 'io.jsonwebtoken:jjwt-api'
  api 'io.jsonwebtoken:jjwt-impl'
  api 'org.apache.logging.log4j:log4j-api'
  api 'org.apache.tomcat.embed:tomcat-embed-core'
  api 'com.zaxxer:HikariCP'
  api 'org.slf4j:jul-to-slf4j'
  api 'org.slf4j:slf4j-api'
  api 'org.sonarsource.api.plugin:sonar-plugin-api'
  api 'org.sonarsource.update-center:sonar-update-center-common'
  api 'org.mindrot:jbcrypt'

  api project(':server:sonar-ce-common')
  api project(':server:sonar-ce-task')
  api project(':server:sonar-ce-task-projectanalysis')
  api project(':server:sonar-db-migration')
  api project(':server:sonar-process')
  api project(':server:sonar-server-common')
  api project(':server:sonar-webserver-api')
  api project(':server:sonar-webserver-pushapi')
  api project(':server:sonar-webserver-es')
  api project(':sonar-core')
  api project(':sonar-duplications')
  api project(':sonar-scanner-protocol')
  api project(':sonar-markdown')
  api project(':sonar-plugin-api-impl')
  api project(':sonar-ws')
  implementation project(path: ':server:sonar-webserver-webapi')

  compileOnlyApi 'com.github.spotbugs:spotbugs-annotations'
  // not a transitive dep. At runtime lib/jdbc/h2 is used
  compileOnlyApi 'com.h2database:h2'

  testImplementation 'com.github.spotbugs:spotbugs-annotations'
  testImplementation 'com.h2database:h2'
  testImplementation 'com.squareup.okhttp3:mockwebserver'
  testImplementation 'com.tngtech.java:junit-dataprovider'
  testImplementation 'commons-dbutils:commons-dbutils'
  testImplementation 'org.apache.logging.log4j:log4j-api'
  testImplementation 'org.apache.logging.log4j:log4j-core'
  testImplementation 'org.assertj:assertj-core'
  testImplementation 'org.assertj:assertj-guava'
  testImplementation 'org.eclipse.jetty:jetty-server'
  testImplementation 'org.eclipse.jetty:jetty-servlet'
  testImplementation 'org.hamcrest:hamcrest'
  testImplementation 'org.junit.jupiter:junit-jupiter-api'
  testImplementation 'org.junit.jupiter:junit-jupiter-params'
  testImplementation 'org.mockito:mockito-core'
  testImplementation 'org.sonarsource.api.plugin:sonar-plugin-api-test-fixtures'
  testImplementation 'org.subethamail:subethasmtp'
  testImplementation testFixtures(project(':server:sonar-server-common'))
  testImplementation testFixtures(project(':server:sonar-webserver-auth'))
  testImplementation testFixtures(project(':server:sonar-webserver-es'))
  testImplementation testFixtures(project(':server:sonar-webserver-ws'))
  testImplementation project(':sonar-testing-harness')

  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'

  runtimeOnly 'io.jsonwebtoken:jjwt-jackson'
}

test {
  // Enabling the JUnit Platform (see https://github.com/junit-team/junit5-samples/tree/master/junit5-migration-gradle)
  useJUnitPlatform()
}
