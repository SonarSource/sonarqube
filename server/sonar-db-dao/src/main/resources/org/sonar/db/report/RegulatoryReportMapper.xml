<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">

<mapper namespace="org.sonar.db.report.RegulatoryReportMapper">
  <resultMap id="issueResultMap" type="org.sonar.db.report.IssueFindingDto" autoMapping="true">
    <id property="kee" column="kee"/>
    <result property="severity" column="severity"/>
    <result property="isManualSeverity" column="isManualSeverity"/>
    <result property="message" column="message"/>
    <result property="line" column="line"/>
    <result property="status" column="status"/>
    <result property="resolution" column="resolution"/>
    <result property="fileName" column="fileName"/>
    <result property="type" column="type"/>
    <result property="ruleRepository" column="ruleRepository"/>
    <result property="ruleKey" column="ruleKey"/>
    <result property="securityStandards" column="securityStandards"/>
    <result property="ruleName" column="ruleName"/>
    <result property="creationDate" column="creationDate"/>
    <result property="isNewCodeReferenceIssue" column="isNewCodeReferenceIssue"/>
    <!--Usage of notNullColumn allows to skip creating objects which are not matching discriminator-->
    <collection property="comments" ofType="string" notNullColumn="issue_change_kee">
      <discriminator javaType="string" column="change_type" >
        <case value="comment">
          <result column="change_data"/>
        </case>
      </discriminator>
    </collection>
        <collection property="impacts" column="ii_softwareQuality" notNullColumn="ii_softwareQuality"
                    javaType="java.util.Set" ofType="Impact">
      <result property="softwareQuality" column="ii_softwareQuality"/>
      <result property="severity" column="ii_severity"/>
      <result property="manualSeverity" column="ii_manualSeverity"/>
    </collection>
  </resultMap>

  <sql id="issueColumns">
    i.kee as kee,
    i.severity as severity,
    i.manual_severity as isManualSeverity,
    i.message as message,
    i.line as line,
    i.status as status,
    i.resolution as resolution,
    p.path as fileName,
    i.issue_type as type,
    r.plugin_name as ruleRepository,
    r.plugin_rule_key as ruleKey,
    r.security_standards as securityStandards,
    r.name as ruleName,
    i.issue_creation_date as creationDate,
    <include refid="org.sonar.db.issue.IssueMapper.issueImpactsColumns"/>
    <include refid="org.sonar.db.issue.IssueMapper.isNewCodeReferenceIssue"/>
  </sql>

  <select id="scrollIssues" parameterType="String" resultMap="issueResultMap" resultOrdered="true"
    fetchSize="${_scrollFetchSize}" resultSetType="FORWARD_ONLY">
    select
    <include refid="issueColumns"/>,
    ic.kee as issue_change_kee,
    ic.change_data,
    ic.change_type
    from issues i
    inner join rules r on r.uuid=i.rule_uuid
    inner join components p on p.uuid=i.component_uuid
    left join issue_changes ic on ic.issue_key = i.kee
    left join new_code_reference_issues n on i.kee = n.issue_key
    left outer join issues_impacts ii on i.kee = ii.issue_key
    where i.project_uuid=#{branchUuid,jdbcType=VARCHAR}
    and i.status !='CLOSED'
    <!--BUG, VULNERABILITY, SECURITY_HOTSPOT    -->
    and i.issue_type in (2, 3, 4)
    order by i.kee, ic.issue_change_creation_date
  </select>
</mapper>
