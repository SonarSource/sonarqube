<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">
<mapper namespace="org.sonar.db.component.BranchMapper">

  <sql id="columns">
    pb.uuid as uuid,
    pb.project_uuid as projectUuid,
    pb.kee as kee,
    pb.branch_type as branchType,
    pb.merge_branch_uuid as mergeBranchUuid,
    pb.pull_request_binary as pullRequestBinary,
    pb.exclude_from_purge as excludeFromPurge,
    pb.need_issue_sync as needIssueSync,
    pb.is_main as isMain
  </sql>

  <sql id="telemetryColumns">
    pb.uuid as branchUuid,
    pb.project_uuid as projectUuid,
    pb.kee as branchKey,
    pb.exclude_from_purge as excludeFromPurge,
    coalesce(ag.greenQualityGateCount, 0) as greenQualityGateCount,
    coalesce(ag.analysisCount, 0) as analysisCount
  </sql>

  <insert id="insert" parameterType="map" useGeneratedKeys="false">
    insert into project_branches (
    uuid,
    project_uuid,
    kee,
    branch_type,
    merge_branch_uuid,
    pull_request_binary,
    created_at,
    updated_at,
    exclude_from_purge,
    need_issue_sync,
    is_main
    ) values (
    #{dto.uuid, jdbcType=VARCHAR},
    #{dto.projectUuid, jdbcType=VARCHAR},
    #{dto.kee, jdbcType=VARCHAR},
    #{dto.branchType, jdbcType=VARCHAR},
    #{dto.mergeBranchUuid, jdbcType=VARCHAR},
    #{dto.pullRequestBinary, jdbcType=BINARY},
    #{now, jdbcType=BIGINT},
    #{now, jdbcType=BIGINT},
    #{dto.excludeFromPurge, jdbcType=BOOLEAN},
    #{dto.needIssueSync, jdbcType=BOOLEAN},
    #{dto.isMain, jdbcType=BOOLEAN}
    )
  </insert>

  <update id="updateBranchName" parameterType="map">
    update project_branches
    set
      kee = #{newBranchName, jdbcType=VARCHAR},
      updated_at = #{now, jdbcType=BIGINT}
    where
      uuid = #{branchUuid, jdbcType=VARCHAR}
  </update>

  <update id="updateExcludeFromPurge">
    update project_branches
    set
      exclude_from_purge = #{excludeFromPurge, jdbcType=BOOLEAN},
      updated_at = #{now, jdbcType=BIGINT}
    where
      uuid = #{uuid, jdbcType=VARCHAR}
  </update>

  <update id="update" parameterType="map" useGeneratedKeys="false">
    update project_branches
    set
      merge_branch_uuid = #{dto.mergeBranchUuid, jdbcType=VARCHAR},
      pull_request_binary = #{dto.pullRequestBinary, jdbcType=BINARY},
      updated_at = #{now, jdbcType=BIGINT}
    where
      uuid = #{dto.uuid, jdbcType=VARCHAR}
  </update>

  <select id="selectByKey" resultType="org.sonar.db.component.BranchDto">
    select <include refid="columns"/>
    from project_branches pb
    where
      pb.project_uuid = #{projectUuid, jdbcType=VARCHAR} and
      pb.kee = #{key, jdbcType=VARCHAR} and
      pb.branch_type = #{branchType, jdbcType=VARCHAR}
  </select>

  <select id="selectByKeys" resultType="org.sonar.db.component.BranchDto">
    select <include refid="columns"/>
    from project_branches pb
    where
    pb.project_uuid = #{projectUuid, jdbcType=VARCHAR} and
    pb.kee in
    <foreach collection="keys" open="(" close=")" item="key" separator=",">
      #{key,jdbcType=VARCHAR}
    </foreach>
  </select>

  <select id="selectByBranchKeys" resultType="org.sonar.db.component.BranchDto">
    select
    <include refid="columns"/>
    from project_branches pb
    where
    <foreach collection="branchKeyByProjectUuid" index="key" item="value" open="" separator=" or " close="">
        (pb.project_uuid=#{key,jdbcType=VARCHAR} and pb.kee=#{value,jdbcType=VARCHAR})
    </foreach>
    and pb.branch_type='BRANCH'
  </select>

    <select id="selectByPullRequestKeys" resultType="org.sonar.db.component.BranchDto">
    select
    <include refid="columns"/>
    from project_branches pb
    where
    <foreach collection="prKeyByProjectUuid" index="key" item="value" open="" separator=" or " close="">
        (pb.project_uuid=#{key,jdbcType=VARCHAR} and pb.kee=#{value,jdbcType=VARCHAR})
    </foreach>
    and pb.branch_type='PULL_REQUEST'
  </select>


  <select id="selectBranchMeasuresWithCaycMetric" resultType="org.sonar.db.component.BranchMeasuresDto">
    select
    <include refid="telemetryColumns"/>
    from project_branches pb
    left join (
      select pm.component_uuid as branchUuid, count(case when pm.text_value ='OK' then 1 end) as greenQualityGateCount, count(1) as analysisCount
      from project_measures pm
      inner join metrics m on m.uuid = pm.metric_uuid
      inner join snapshots s on s.uuid = pm.analysis_uuid
      where m.name = 'alert_status' and s.created_at >= #{yesterday, jdbcType=BIGINT}
      group by pm.component_uuid
    ) ag
    on ag.branchUuid = pb.uuid
    where pb.branch_type='BRANCH'
  </select>

  <select id="selectByProjectUuid" parameterType="string" resultType="org.sonar.db.component.BranchDto">
    select <include refid="columns"/>
    from project_branches pb
    where
    pb.project_uuid = #{projectUuid, jdbcType=VARCHAR}
  </select>


  <select id="selectMainBranchByProjectUuid" resultType="org.sonar.db.component.BranchDto">
    select <include refid="columns"/>
    from project_branches pb
    where
    pb.project_uuid = #{projectUuid, jdbcType=VARCHAR}
    and is_main = ${_true}
  </select>

  <select id="selectMainBranchesByProjectUuids" parameterType="string" resultType="org.sonar.db.component.BranchDto">
    select <include refid="columns"/>
    from project_branches pb
    where pb.project_uuid in
    <foreach collection="projectUuids" open="(" close=")" item="uuid" separator=",">
      #{uuid,jdbcType=VARCHAR}
    </foreach>
    and is_main = ${_true}
  </select>

  <select id="countPrBranchAnalyzedLanguageByProjectUuid" resultType="org.sonar.db.component.PrBranchAnalyzedLanguageCountByProjectDto">
    select pb.project_uuid as projectUuid,
      sum(case when pb.branch_type = 'PULL_REQUEST' then 1 else 0 end) as pullRequest,
      sum(case when pb.branch_type = 'BRANCH' then 1 else 0 end) as branch
	  from project_branches pb
    group by pb.project_uuid
  </select>

  <select id="selectByUuids" resultType="org.sonar.db.component.BranchDto">
    select <include refid="columns"/>
    from project_branches pb
    where
    pb.uuid in
    <foreach collection="uuids" open="(" close=")" item="uuid" separator=",">
      #{uuid,jdbcType=VARCHAR}
    </foreach>
  </select>

  <select id="selectByUuid" resultType="org.sonar.db.component.BranchDto">
    select
    <include refid="columns"/>
    from project_branches pb
    where
    pb.uuid = #{uuid, jdbcType=VARCHAR}
  </select>

  <select id="selectProjectUuidsWithIssuesNeedSync" resultType="String">
    select distinct pb.project_uuid
    from project_branches pb
    where pb.need_issue_sync = ${_true}
    and pb.project_uuid in
    <foreach collection="projectUuids" open="(" close=")" item="uuid" separator=",">
      #{uuid,jdbcType=VARCHAR}
    </foreach>
  </select>

  <select id="countByTypeAndCreationDate" parameterType="map" resultType="long">
    select count(pb.uuid)
    from project_branches pb
    where
    pb.branch_type = #{branchType, jdbcType=VARCHAR}
    and pb.created_at &gt;= #{sinceDate, jdbcType=BIGINT}
  </select>

  <sql id="hasAnyBranchWhereNeedIssueSyncSql">
    select
    case when exists
    (
    select pb.uuid from project_branches pb where need_issue_sync = #{needIssueSync, jdbcType=BOOLEAN}
    )
    then 1
    else 0
    end
  </sql>

  <select id="hasAnyBranchWhereNeedIssueSync" parameterType="map" resultType="short">
    <include refid="hasAnyBranchWhereNeedIssueSyncSql"/>
  </select>

  <select id="hasAnyBranchWhereNeedIssueSync" parameterType="map" resultType="short" databaseId="oracle">
    <include refid="hasAnyBranchWhereNeedIssueSyncSql"/>
    from dual
  </select>

  <select id="selectBranchNeedingIssueSync" resultType="org.sonar.db.component.BranchDto">
    select
    <include refid="columns"/>
    from project_branches pb
    where need_issue_sync = ${_true}
    order by pb.updated_at desc, uuid
  </select>

  <select id="selectBranchNeedingIssueSyncForProject" resultType="org.sonar.db.component.BranchDto">
    select
    <include refid="columns"/>
    from project_branches pb
    where need_issue_sync = ${_true} and project_uuid = #{projectUuid, jdbcType=VARCHAR}
    order by pb.updated_at desc, uuid
  </select>

  <update id="updateAllNeedIssueSync">
    update project_branches
    set
      need_issue_sync = ${_true},
      updated_at = #{now, jdbcType=BIGINT}
  </update>

  <update id="updateAllNeedIssueSyncForProject">
    update project_branches
    set
      need_issue_sync = ${_true},
      updated_at = #{now, jdbcType=BIGINT}
    where
      project_uuid = #{projectUuid, jdbcType=VARCHAR}
  </update>

  <update id="updateNeedIssueSync">
    update project_branches
    set
      need_issue_sync = #{needIssueSync, jdbcType=BOOLEAN},
      updated_at = #{now, jdbcType=BIGINT}
    where
      uuid = #{uuid, jdbcType=VARCHAR}
  </update>

    <update id="updateIsMain">
    update project_branches
    set
      is_main = #{isMain, jdbcType=BOOLEAN},
      updated_at = #{now, jdbcType=BIGINT}
    where
      uuid = #{uuid, jdbcType=VARCHAR}
  </update>

  <sql id="doAnyOfComponentsNeedIssueSyncSql">
    select
    case when exists
    (
    select pb.project_uuid, pb.need_issue_sync from project_branches pb
      join components c on pb.uuid = c.branch_uuid
    where c.kee in
    <foreach collection="componentKeys" open="(" close=")" item="componentKey" separator=",">
      #{componentKey,jdbcType=VARCHAR}
    </foreach>
    and pb.need_issue_sync = ${_true}
    )
    then 1
    else 0
    end
  </sql>

  <select id="doAnyOfComponentsNeedIssueSync" parameterType="map" resultType="short">
    <include refid="doAnyOfComponentsNeedIssueSyncSql"/>
  </select>

  <select id="doAnyOfComponentsNeedIssueSync" parameterType="map" resultType="short" databaseId="oracle">
    <include refid="doAnyOfComponentsNeedIssueSyncSql"/>
    from dual
  </select>

</mapper>
