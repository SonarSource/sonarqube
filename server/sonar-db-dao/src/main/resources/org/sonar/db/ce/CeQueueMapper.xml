<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">

<mapper namespace="org.sonar.db.ce.CeQueueMapper">

  <sql id="columns">
    cq.uuid,
    pj.organization_uuid as organizationUuid,
    cq.task_type as taskType,
    cq.component_uuid as componentUuid,
    cq.entity_uuid as entityUuid,
    cq.status as status,
    cq.submitter_uuid as submitterUuid,
    cq.worker_uuid as workerUuid,
    cq.started_at as startedAt,
    cq.created_at as createdAt,
    cq.updated_at as updatedAt
  </sql>

  <sql id="orderByDateAndUuid">
    order by
      cq.created_at asc,
      cq.uuid asc
  </sql>

  <sql id="orderByDescDateAndUuid">
    order by
      cq.created_at desc,
      cq.uuid desc
  </sql>

  <select id="selectByUuid" parameterType="String" resultType="org.sonar.db.ce.CeQueueDto">
    select
      <include refid="columns"/>
    from
      ce_queue cq
    inner join projects pj on pj.uuid = cq.main_component_uuid
    where
      cq.uuid=#{uuid,jdbcType=VARCHAR}
  </select>

  <select id="countByStatusAndEntityUuid" parameterType="map" resultType="int">
    select
      count(1)
    from
      ce_queue
    where
      status=#{status,jdbcType=VARCHAR}
      <if test="entityUuid!=null">
        and entity_uuid=#{entityUuid,jdbcType=VARCHAR}
      </if>
  </select>

  <select id="selectCreationDateOfOldestPendingByEntityUuid" parameterType="map" resultType="Long">
    select
      min(created_at)
    from
      ce_queue
    where
      status='PENDING'
      <if test="entityUuid!=null">
        and entity_uuid=#{entityUuid,jdbcType=VARCHAR}
      </if>
  </select>

  <select id="countByStatusAndEntityUuids" resultType="org.sonar.db.ce.QueueCount">
    select
      entity_uuid as entityUuid,
      count(1) as total
    from
      ce_queue
    where
      status=#{status,jdbcType=VARCHAR}
      and entity_uuid in
      <foreach collection="entityUuids" open="(" close=")" item="entityUuid" separator=",">
        #{entityUuid,jdbcType=VARCHAR}
      </foreach>
    group by entity_uuid
  </select>

  <select id="countAll" resultType="int">
    select
      count(1)
    from
      ce_queue
  </select>

  <select id="selectByEntityUuid" parameterType="String" resultType="org.sonar.db.ce.CeQueueDto">
    select
      <include refid="columns"/>
    from
      ce_queue cq
    inner join projects pj on pj.uuid = cq.main_component_uuid
    where
      cq.entity_uuid=#{entityUuid,jdbcType=VARCHAR}
    <include refid="orderByDateAndUuid"/>
  </select>

  <select id="selectAllInAscOrder" resultType="org.sonar.db.ce.CeQueueDto">
    select
      <include refid="columns"/>
    from
      ce_queue cq
    inner join projects pj on pj.uuid = cq.main_component_uuid
    <include refid="orderByDateAndUuid"/>
  </select>

  <select id="selectByQueryInDescOrder" resultType="org.sonar.db.ce.CeQueueDto">
    select
    <include refid="columns"/>
    <include refid="sqlSelectByQuery"/>
    <include refid="orderByDescDateAndUuid"/>
    <include refid="org.sonar.db.common.Common.pagination"/>
  </select>

  <select id="countByQuery" resultType="int">
    select
      count(1)
    <include refid="sqlSelectByQuery"/>
  </select>

  <sql id="sqlSelectByQuery">
    from
      ce_queue cq
    inner join projects pj on pj.uuid = cq.main_component_uuid
    <where>
      <if test="query.entityUuids != null and query.entityUuids.size()>0">
        and cq.entity_uuid in
        <foreach collection="query.entityUuids" open="(" close=")" item="entityUuid" separator=",">
          #{entityUuid,jdbcType=VARCHAR}
        </foreach>
      </if>
      <if test="query.statuses != null">
        and cq.status in
        <foreach collection="query.statuses" open="(" close=")" item="status" separator=",">
          #{status,jdbcType=VARCHAR}
        </foreach>
      </if>
      <if test="query.type != null">
        and cq.task_type=#{query.type,jdbcType=VARCHAR}
      </if>
      <if test="query.minSubmittedAt != null">
        and cq.created_at &gt;= #{query.minSubmittedAt,jdbcType=BIGINT}
      </if>
    </where>
  </sql>

  <select id="selectEligibleForPeek" parameterType="map" resultType="org.sonar.db.ce.CeTaskDtoLight">
    select cq.uuid as ceTaskUuid, cq.created_at as createdAt
    <include refid="sqlSelectEligibleForPeek"/>
    <include refid="orderBySelectEligibleForPeek"/>
    <include refid="org.sonar.db.common.Common.pagination"/>
  </select>

  <sql id="columnsSelectEligibleForPeek">
    cq.uuid as "uuid",
    cq.created_at as "created_at"
  </sql>

  <sql id="sqlSelectEligibleForPeek">
    from
      ce_queue cq
    <if test="excludeViewRefresh">
        left join components c on c.uuid = cq.entity_uuid and c.qualifier &lt;&gt; 'VW'
    </if>
      left join ce_queue cq2 on cq.entity_uuid=cq2.entity_uuid and cq2.status &lt;&gt;'PENDING'
    where
      cq.status='PENDING'
      and cq.started_at is null
      and cq2.uuid is null
      <if test="excludeIndexationJob">
        and cq.task_type &lt;&gt; 'ISSUE_SYNC'
      </if>
  </sql>

  <sql id="orderBySelectEligibleForPeek">
    order by
      cq.created_at asc,
      cq.uuid asc
  </sql>

  <select id="selectPending" resultType="org.sonar.db.ce.CeQueueDto">
    select
      <include refid="columns"/>
    from
      ce_queue cq
    inner join projects pj on pj.uuid = cq.main_component_uuid
    where
      cq.status = 'PENDING'
  </select>

  <select id="selectWornout" resultType="org.sonar.db.ce.CeQueueDto">
    select
      <include refid="columns"/>
    from
      ce_queue cq
    inner join projects pj on pj.uuid = cq.main_component_uuid
    where
      cq.status = 'PENDING'
      and cq.started_at is not null
  </select>

  <select id="selectInProgressStartedBefore" resultType="org.sonar.db.ce.CeQueueDto">
    select
    <include refid="columns"/>
    from
      ce_queue cq
    inner join projects pj on pj.uuid = cq.main_component_uuid
    where
      cq.status = 'IN_PROGRESS'
      and cq.started_at is not null
      and cq.started_at &lt; #{date,jdbcType=BIGINT}
  </select>

  <insert id="insert" parameterType="org.sonar.db.ce.CeQueueDto" useGeneratedKeys="false">
    insert into ce_queue
    (
      uuid,
      task_type,
      component_uuid,
      entity_uuid,
      status,
      submitter_uuid,
      worker_uuid,
      execution_count,
      created_at,
      updated_at,
      started_at
    )
    values (
      #{uuid,jdbcType=VARCHAR},
      #{taskType,jdbcType=VARCHAR},
      #{componentUuid,jdbcType=VARCHAR},
      #{entityUuid,jdbcType=VARCHAR},
      #{status,jdbcType=VARCHAR},
      #{submitterUuid,jdbcType=VARCHAR},
      #{workerUuid,jdbcType=VARCHAR},
      0,
      #{createdAt,jdbcType=BIGINT},
      #{updatedAt,jdbcType=BIGINT},
      #{startedAt,jdbcType=BIGINT}
    )
  </insert>

  <select id="selectNotPendingForWorker" resultType="org.sonar.db.ce.CeQueueDto">
    select
    <include refid="columns"/>
    from
    ce_queue cq
    where
    cq.status &lt;&gt; 'PENDING'
    and worker_uuid = #{workerUuid,jdbcType=VARCHAR}
  </select>

  <update id="resetToPendingByUuid">
    update ce_queue set
      status='PENDING',
      updated_at=#{updatedAt,jdbcType=BIGINT}
    where
      uuid = #{uuid,jdbcType=VARCHAR}
  </update>

  <update id="updateIf" parameterType="map">
    update ce_queue set
      status=#{new.status,jdbcType=VARCHAR},
      worker_uuid=#{new.workerUuid,jdbcType=VARCHAR},
      started_at=#{new.startedAt,jdbcType=BIGINT},
      updated_at=#{new.updatedAt,jdbcType=BIGINT}
    where
      uuid=#{uuid,jdbcType=VARCHAR}
      and status=#{old.status,jdbcType=VARCHAR}
  </update>

  <delete id="deleteByUuid">
    delete from
      ce_queue
    where
      uuid=#{uuid,jdbcType=VARCHAR}
      <if test="deleteIf != null">
        and status = #{deleteIf.expectedStatus,jdbcType=VARCHAR}
      </if>
  </delete>

  <update id="resetTasksWithUnknownWorkerUUIDs">
    update ce_queue set
      status='PENDING',
      worker_uuid=NULL,
      updated_at=#{updatedAt,jdbcType=BIGINT}
    where
      status = 'IN_PROGRESS'
    and (
      worker_uuid is NULL
      or worker_uuid not in
      <foreach collection="knownWorkerUUIDs" open="(" close=")" item="workerUUID" separator=",">
        #{workerUUID,jdbcType=VARCHAR}
      </foreach>
    )
  </update>

  <update id="resetAllInProgressTasks">
    update ce_queue set
      status='PENDING',
      worker_uuid=NULL,
      updated_at=#{updatedAt,jdbcType=BIGINT}
    where
      status = 'IN_PROGRESS'
  </update>

  <sql id="hasAnyIssueSyncTaskPendingOrInProgressSql">
    select
    case when exists
    (
    select cq.uuid from ce_queue cq where cq.task_type = 'ISSUE_SYNC' and status in ('IN_PROGRESS', 'PENDING')
    )
    then 1
    else 0
    end
  </sql>

  <select id="hasAnyIssueSyncTaskPendingOrInProgress" parameterType="map" resultType="boolean">
    <include refid="hasAnyIssueSyncTaskPendingOrInProgressSql"/>
  </select>

  <select id="hasAnyIssueSyncTaskPendingOrInProgress" parameterType="map" resultType="boolean" databaseId="oracle">
    <include refid="hasAnyIssueSyncTaskPendingOrInProgressSql"/>
    from dual
  </select>

  <select id="selectOldestPendingPrOrBranch" resultType="org.sonar.db.ce.PrOrBranchTask">
    select <include refid="oldestPendingPrOrBranch"/> limit 100
  </select>

  <select id="selectOldestPendingPrOrBranch" resultType="org.sonar.db.ce.PrOrBranchTask" databaseId="mssql">
    select top (100)  <include refid="oldestPendingPrOrBranch"/>
  </select>

  <select id="selectOldestPendingPrOrBranch" resultType="org.sonar.db.ce.PrOrBranchTask" databaseId="oracle">
    select * from (select <include refid="oldestPendingPrOrBranch"/>) where rownum &lt;= 100
  </select>

  <sql id="oldestPendingPrOrBranch">
    cq.uuid as ceTaskUuid,
      cq.entity_uuid as entityUuid,
      cq.component_uuid as componentUuid,
      cq.created_at as createdAt,
      cq.task_type as taskType,
      coalesce(ctc.kee, 'branch') as branchType
    from
      ce_queue cq
      left join ce_task_characteristics ctc on cq.uuid = ctc.task_uuid and (ctc.kee = 'branch' or ctc.kee = 'pullRequest')
    where
      cq.status = 'PENDING'
      and cq.task_type = 'REPORT'
    order by
      cq.created_at, cq.uuid
  </sql>

  <select id="selectInProgressWithCharacteristics" resultType="org.sonar.db.ce.PrOrBranchTask">
    select
      cq.uuid as ceTaskUuid,
      cq.entity_uuid as entityUuid,
      cq.created_at as createdAt,
      coalesce(ctc.kee, 'branch') as branchType,
      cq.task_type as taskType,
      cq.component_uuid as componentUuid
    from
      ce_queue cq left join ce_task_characteristics ctc on cq.uuid = ctc.task_uuid and (ctc.kee = 'branch' or ctc.kee = 'pullRequest')
    where
      cq.status = 'IN_PROGRESS'
  </select>

</mapper>
