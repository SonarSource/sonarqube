<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">
<mapper namespace="org.sonar.db.project.ProjectMapper">

    <sql id="projectColumns">
      p.uuid as uuid,
      p.organization_uuid as organizationUuid,
      p.kee as kee,
      p.qualifier as qualifier,
      p.name as name,
      p.description as description,
      p.tags as tagsString,
      p.private as isPrivate,
      p.creation_method as creationMethod,
      p.contains_ai_code as containsAiCode,
      p.ai_code_fix_enabled as aiCodeFixEnabled,
      p.created_at as createdAt,
      p.updated_at as updatedAt
    </sql>

  <select id="selectByUuid" parameterType="String" resultType="Project">
    SELECT
      <include refid="projectColumns"/>
    FROM projects p
    where
      p.uuid=#{uuid,jdbcType=VARCHAR}
  </select>

  <select id="selectByUuids" resultType="Project">
    select
      <include refid="projectColumns"/>
    from projects p
    where
      p.uuid in
      <foreach collection="uuids" open="(" close=")" item="uuid" separator=",">
        #{uuid,jdbcType=VARCHAR}
      </foreach>
  </select>

    <select id="selectByUuidsWithPagination" resultType="Project">
    select
      <include refid="projectColumns"/>
    from projects p
    where
      p.uuid in
      <foreach collection="uuids" open="(" close=")" item="uuid" separator=",">
        #{uuid,jdbcType=VARCHAR}
      </foreach>
      order by p.name, uuid desc
      <include refid="org.sonar.db.common.Common.pagination"/>
  </select>

  <select id="selectProjectsByKeys" resultType="Project">
    select
      <include refid="projectColumns"/>
    from projects p
    where
      p.qualifier='TRK' and
      p.kee in
      <foreach collection="kees" open="(" close=")" item="k" separator=",">
        #{k,jdbcType=VARCHAR}
      </foreach>
  </select>

    <select id="selectApplicationsByKeys" resultType="Project">
    select
      <include refid="projectColumns"/>
    from projects p
    where
      p.qualifier='APP' and
      p.kee in
      <foreach collection="kees" open="(" close=")" item="k" separator=",">
        #{k,jdbcType=VARCHAR}
      </foreach>
  </select>

    <select id="selectByBranchUuid" parameterType="String" resultType="Project">
    SELECT
      <include refid="projectColumns"/>
    FROM projects p inner join project_branches pb on pb.project_uuid = p.uuid
    where pb.uuid=#{branchUuid,jdbcType=VARCHAR}
  </select>

    <select id="selectProjects" resultType="Project">
    select
      <include refid="projectColumns"/>
    from projects p
    where
      p.qualifier='TRK'
  </select>

  <select id="selectAll" resultType="Project">
    select
      <include refid="projectColumns"/>
    from projects p
  </select>

  <select id="selectAllApplications" resultType="Project">
    select
      <include refid="projectColumns"/>
    from projects p
    where
      p.qualifier='APP'
  </select>

  <select id="selectProjectByKey" parameterType="String" resultType="Project">
    SELECT
      <include refid="projectColumns"/>
    FROM projects p
    where
      p.qualifier='TRK' and
      p.kee=#{key,jdbcType=VARCHAR}
  </select>

  <select id="selectApplicationByKey" parameterType="String" resultType="Project">
    SELECT
    <include refid="projectColumns"/>
    FROM projects p
    where
    p.qualifier='APP' and
    p.kee=#{key,jdbcType=VARCHAR}
  </select>

  <select id="selectProjectsByOrganizationUuids" resultType="Project">
    select
    <include refid="projectColumns"/>
    from projects p
    where
    p.qualifier='TRK' and
    p.organization_uuid in
    <foreach collection="orgUuids" open="(" close=")" item="orgUuid" separator=",">
      #{orgUuid,jdbcType=VARCHAR}
    </foreach>
  </select>

  <select id="selectProjectOrAppByKey" parameterType="String" resultType="Project">
    SELECT
    <include refid="projectColumns"/>
    FROM projects p
    where
    p.kee=#{key,jdbcType=VARCHAR}
  </select>

  <select id="selectProjectUuidsAssociatedToDefaultQualityProfileByLanguage" parameterType="map" resultType="string">
    select
      p.uuid
    from
      live_measures lm
    inner join
      project_branches pb on pb.uuid = lm.component_uuid
    inner join
      projects p on p.uuid = pb.project_uuid
    inner join
      metrics m on m.uuid = lm.metric_uuid
    where
      m.name = 'ncloc_language_distribution'
      and pb.is_main = ${_true}
      and p.uuid not in (select project_uuid from project_qprofiles)
      and
      <foreach collection="languageFilters" index="index" item="languageFilter" open="(" separator=" or " close=")">
        lm.text_value like #{languageFilter, jdbcType=VARCHAR} escape '/'
      </foreach>
  </select>

  <select id="selectProjectsByLanguage" parameterType="map" resultType="Project">
    select distinct
      <include refid="projectColumns"/>
    from
      live_measures lm
    inner join
      project_branches pb on pb.uuid = lm.project_uuid and pb.is_main = ${_true}
    inner join
      projects p on p.uuid = pb.project_uuid
    inner join
      metrics m on m.uuid = lm.metric_uuid
    where
      m.name = 'ncloc_language_distribution'
      and
      <foreach collection="languageFilters" index="index" item="languageFilter" open="(" separator=" or " close=")">
        lm.text_value like #{languageFilter, jdbcType=VARCHAR} escape '/'
      </foreach>
  </select>

  <insert id="insert" parameterType="Project">
    INSERT INTO projects (
      organization_uuid,
      kee,
      qualifier,
      uuid,
      name,
      description,
      private,
      tags,
      creation_method,
      contains_ai_code,
      ai_code_fix_enabled,
      created_at,
      updated_at
    )
    VALUES (
    #{organizationUuid,jdbcType=VARCHAR},
    #{kee,jdbcType=VARCHAR},
    #{qualifier,jdbcType=VARCHAR},
    #{uuid,jdbcType=VARCHAR},
    #{name,jdbcType=VARCHAR},
    #{description,jdbcType=VARCHAR},
    #{isPrivate,jdbcType=BOOLEAN},
    #{tagsString, jdbcType=VARCHAR},
    #{creationMethod, jdbcType=VARCHAR},
    #{containsAiCode, jdbcType=BOOLEAN},
    #{aiCodeFixEnabled, jdbcType=BOOLEAN},
    #{createdAt,jdbcType=BIGINT},
    #{updatedAt,jdbcType=BIGINT}
    )
  </insert>

  <update id="updateTags" parameterType="Project">
    update projects set
    tags = #{tagsString,jdbcType=VARCHAR},
    updated_at = #{updatedAt,jdbcType=BIGINT}
    where
    uuid = #{uuid,jdbcType=VARCHAR}
  </update>

  <update id="update" parameterType="Project">
    update projects set
    name = #{name,jdbcType=VARCHAR},
    description = #{description,jdbcType=VARCHAR},
    ai_code_fix_enabled = #{aiCodeFixEnabled, jdbcType=BOOLEAN},
    updated_at = #{updatedAt,jdbcType=BIGINT}
    where
    uuid = #{uuid,jdbcType=VARCHAR}
  </update>

  <update id="updateVisibility">
    update projects set
    private = #{isPrivate,jdbcType=BOOLEAN},
    updated_at = #{updatedAt,jdbcType=BIGINT}
    where
    uuid = #{uuid,jdbcType=VARCHAR}
  </update>

  <update id="updateContainsAiCode">
    update projects set
    contains_ai_code = #{containsAiCode,jdbcType=BOOLEAN},
    updated_at = #{updatedAt,jdbcType=BIGINT}
    where
    uuid = #{uuid,jdbcType=VARCHAR}
  </update>

  <update id="updateAiCodeFixEnablementForAllProjects">
    update projects set
    ai_code_fix_enabled = #{aiCodeFixEnabled,jdbcType=BOOLEAN},
    updated_at = #{updatedAt,jdbcType=BIGINT}
  </update>

  <update id="updateNcloc">
    update projects set
    ncloc = #{ncloc,jdbcType=BIGINT}
    where
    uuid = #{projectUuid,jdbcType=VARCHAR}
  </update>

  <select id="getNclocSum" parameterType="string" resultType="long">
    select sum(ncloc) from projects where qualifier = 'TRK'
    <if test="projectUuidToExclude != null">
      and uuid &lt;&gt; #{projectUuidToExclude,jdbcType=VARCHAR}
    </if>
  </select>

  <select id="countIndexedProjects" resultType="int">
    select count(p.uuid)
    from projects p
    where p.qualifier = 'TRK'
    and not exists (select 1 from project_branches pb where pb.project_uuid = p.uuid and pb.need_issue_sync = ${_true})
  </select>

  <select id="countProjects" resultType="int">
    select count(p.uuid)
    from projects p
    where p.qualifier = 'TRK'
  </select>

  <select id="countProjectsByAiCodeFixEnablement" resultType="int">
    select count(p.uuid)
    from projects p
    where
    p.qualifier = 'TRK'
    and ai_code_fix_enabled = #{aiCodeFixEnabled,jdbcType=BOOLEAN}
  </select>

</mapper>
