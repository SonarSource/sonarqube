<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">

<mapper namespace="org.sonar.db.permission.GroupPermissionMapper">

  <select id="groupsCountByEntityUuidAndPermission" parameterType="map"
          resultType="org.sonar.db.permission.CountPerEntityPermission">
    SELECT
      count(1) as count,
      permission,
      entityUuid
    FROM (
      SELECT
        g.name as name,
        group_role.role as permission,
        group_role.entity_uuid as entityUuid
      FROM
        groups g
      INNER JOIN group_roles group_role ON
        group_role.group_uuid=g.uuid
      UNION
      -- Add Anyone group permission
      SELECT
        #{anyoneGroup} as name,
        group_role.role as permission,
        group_role.entity_uuid as entityUuid
      FROM
        group_roles group_role
      where
        group_role.group_uuid IS NULL
    ) groups
    where
      groups.entityUuid in
      <foreach collection="entityUuids" open="(" close=")" item="id" separator=",">
        #{id,jdbcType=VARCHAR}
      </foreach>
    GROUP BY
      groups.permission,
      groups.entityUuid
  </select>

  <select id="selectProjectKeysWithAnyonePermissions" parameterType="int" resultType="string">
    select distinct(p.kee) as kee from group_roles gr
    left join projects p on gr.entity_uuid = p.uuid
    where gr.group_uuid is null and gr.entity_uuid is not null
    ORDER BY kee ASC
    limit #{max}
  </select>

  <!-- Oracle -->
  <select id="selectProjectKeysWithAnyonePermissions" parameterType="int" resultType="string" databaseId="oracle">
    select * from (select distinct p.kee as kee from group_roles gr
    left join projects p on gr.entity_uuid = p.uuid
    where gr.group_uuid is null and gr.entity_uuid is not null
    ORDER BY kee ASC
    )
    where rownum &lt;= #{max}
  </select>

  <!-- SQL Server -->
  <select id="selectProjectKeysWithAnyonePermissions" parameterType="int" resultType="string" databaseId="mssql">
    select distinct top(#{max}) p.kee as kee from group_roles gr
    left join projects p on gr.entity_uuid = p.uuid
    where gr.group_uuid is null and gr.entity_uuid is not null
    ORDER BY kee ASC
  </select>

  <select id="countEntitiesWithAnyonePermissions" resultType="int">
    select count(distinct(gr.entity_uuid))
    from group_roles gr where gr.group_uuid is null and gr.entity_uuid is not null
  </select>

  <select id="selectGroupNamesByQuery" resultType="string">
    select sub.name, lower(sub.name), sub.groupUuid
    <include refid="groupsByQuery"/>
    group by sub.name, lower(sub.name), sub.groupUuid
    order by case when (count(sub.permission) > 0) then 1 else 2 end asc, lower(sub.name), sub.name, sub.groupUuid
    <include refid="org.sonar.db.common.Common.pagination"/>
  </select>

  <select id="countGroupsByQuery" parameterType="map" resultType="int">
    select count(1)
    from (
      select distinct sub.groupUuid
      <include refid="groupsByQuery"/>) g
  </select>

  <sql id="groupsByQuery">
    from (
      select g.uuid as groupUuid, g.name as name, gr.role as permission, gr.entity_uuid as entityUuid, gr.uuid as uuid
      from groups g
      left join group_roles gr on g.uuid = gr.group_uuid
      <if test="query.entityUuid == null">
        and gr.entity_uuid is null
      </if>
      <if test="query.entityUuid != null">
        and gr.entity_uuid = #{query.entityUuid,jdbcType=VARCHAR}
      </if>
    where
    g.organization_uuid = #{query.organizationUuid,jdbcType=VARCHAR}

    union all

    select 'Anyone' as groupUuid, 'Anyone' as name, gr.role as permission, gr.entity_uuid as entityUuid, gr.uuid as uuid
    from group_roles gr
    <where>
      <if test="query.entityUuid == null">
        and gr.entity_uuid is null
      </if>
      <if test="query.entityUuid != null">
        and gr.entity_uuid = #{query.entityUuid,jdbcType=VARCHAR}
      </if>
      <if test="query.withAtLeastOnePermission()">
        and gr.organization_uuid = #{query.organizationUuid,jdbcType=VARCHAR} and
        gr.group_uuid is null
      </if>
    </where>

    ) sub
    left join (<include refid="org.sonar.db.entity.EntityMapper.selectAll"/>) entity on sub.entityUuid = entity.uuid
    <where>
      <if test="query.searchQueryToSql != null">
        and lower(sub.name) like #{query.searchQueryToSqlLowercase,jdbcType=VARCHAR} ESCAPE '/'
      </if>
      <!-- filter rows with group permissions -->
      <if test="query.withAtLeastOnePermission()">
        and sub.permission is not null
        <if test="query.entityUuid==null">
          and sub.entityUuid is null
        </if>
        <if test="query.entityUuid!=null">
          and entity.uuid = #{query.entityUuid,jdbcType=VARCHAR}
        </if>
        <if test="query.permission!=null">
          and sub.permission = #{query.permission,jdbcType=VARCHAR}
        </if>
      </if>
    </where>
  </sql>

  <select id="selectByGroupUuids" parameterType="map" resultType="GroupPermission">
    select sub.groupUuid as groupUuid, sub.entityUuid as entityUuid, sub.permission as role, sub.organizationUuid as organizationUuid
    from
      (
      select gr.group_uuid as groupUuid, gr.entity_uuid as entityUuid, gr.role as permission, g.name as name, gr.organization_uuid as organizationUuid
      from group_roles gr
      inner join groups g ON g.uuid = gr.group_uuid
      where gr.organization_uuid = #{organizationUuid,jdbcType=VARCHAR} and
      gr.group_uuid is not null

      union all

      select 'Anyone' as groupUuid, gr.entity_uuid as entityUuid, gr.role as permission, 'Anyone' as name, gr.organization_uuid as organizationUuid
      from group_roles gr
      where
      gr.group_uuid is null and
      gr.organization_uuid = #{organizationUuid,jdbcType=VARCHAR}
      ) sub
    where
      sub.groupUuid in
      <foreach collection="groupUuids" open="(" close=")" item="groupUuid" separator=",">
        #{groupUuid,jdbcType=VARCHAR}
      </foreach>
      <if test="entityUuid != null">
        and sub.entityUuid = #{entityUuid,jdbcType=VARCHAR}
      </if>
      <if test="entityUuid==null">
        and sub.entityUuid is null
      </if>
  </select>

  <select id="selectGlobalPermissionsOfGroups" parameterType="map" resultType="String">
    select gr.role
    from group_roles gr
    where
    gr.component_uuid is null and
    <choose>
      <when test="groupUuid != null">
        gr.group_uuid = #{groupUuid,jdbcType=VARCHAR}
      </when>
      <otherwise>
        gr.group_uuid is null
      </otherwise>
    </choose>
  </select>

  <select id="selectGlobalPermissionsOfGroup" parameterType="map" resultType="String">
    select gr.role
    from group_roles gr
    where
    gr.organization_uuid = #{organizationUuid,jdbcType=VARCHAR} and
    gr.entity_uuid is null and
    <choose>
      <when test="groupUuid != null">
        gr.group_uuid = #{groupUuid,jdbcType=VARCHAR}
      </when>
      <otherwise>
        gr.group_uuid is null
      </otherwise>
    </choose>
  </select>

  <select id="selectEntityPermissionsOfGroup" parameterType="map" resultType="String">
    select gr.role
    from group_roles gr
    where
    gr.organization_uuid = #{organizationUuid,jdbcType=VARCHAR} and
    gr.entity_uuid = #{entityUuid,jdbcType=VARCHAR} and
    <choose>
      <when test="groupUuid != null">
        gr.group_uuid = #{groupUuid,jdbcType=VARCHAR}
      </when>
      <otherwise>
        gr.group_uuid is null
      </otherwise>
    </choose>
  </select>

  <select id="selectAllPermissionsByGroupUuid" parameterType="map" resultType="GroupPermission">
    select gr.group_uuid as groupUuid, gr.component_uuid as componentUuid, gr.role as role, gr.organization_uuid as organizationUuid
    from group_roles gr
    where gr.organization_uuid = #{organizationUuid,jdbcType=VARCHAR}
    and gr.group_uuid = #{groupUuid,jdbcType=VARCHAR}
  </select>

  <select id="selectGroupUuidsWithPermissionOnEntityBut" resultType="string">
    select
      distinct gr1.group_uuid
    from
      group_roles gr1
    where
      gr1.entity_uuid = #{entityUuid,jdbcType=VARCHAR}
      and gr1.group_uuid is not null
      and not exists (
        select
          1
        from
          group_roles gr2
        where
          gr2.entity_uuid = gr1.entity_uuid
          and gr2.group_uuid = gr1.group_uuid
          and gr2.role = #{role,jdbcType=VARCHAR}
      )
  </select>

   <select id="selectGroupUuidsWithPermissionOnEntity" resultType="string">
    select
      distinct gr1.group_uuid
    from
      group_roles gr1
    where
      gr1.entity_uuid = #{entityUuid,jdbcType=VARCHAR}
      and gr1.group_uuid is not null
      and gr1.role = #{role,jdbcType=VARCHAR}
  </select>

 <select id="selectGroupPermissionsOnEntity" resultType="GroupPermission">
    select gr.group_uuid as groupUuid, gr.entity_uuid as entityUuid, gr.role as role
    from group_roles gr
    where gr.entity_uuid = #{entityUuid,jdbcType=VARCHAR}
  </select>

  <insert id="insert" parameterType="GroupPermission">
    insert into group_roles (
    uuid,
    organization_uuid,
    group_uuid,
    entity_uuid,
    role
    ) values (
    #{uuid,jdbcType=VARCHAR},
    #{organizationUuid,jdbcType=VARCHAR},
    #{groupUuid,jdbcType=VARCHAR},
    #{entityUuid,jdbcType=BIGINT},<!--Why big int?-->
    #{role,jdbcType=VARCHAR}
    )
  </insert>

  <delete id="deleteByEntityUuid" parameterType="String">
    delete from group_roles
    where entity_uuid=#{entityUuid,jdbcType=VARCHAR}
  </delete>

  <delete id="deleteByEntityUuidAndGroupUuid">
    delete from
      group_roles
    where
      entity_uuid=#{entityUuid,jdbcType=VARCHAR}
      <choose>
        <when test="groupUuid != null">
          and group_uuid = #{groupUuid,jdbcType=VARCHAR}
        </when>
        <otherwise>
          and group_uuid is null
        </otherwise>
      </choose>
  </delete>

  <delete id="deleteByEntityUuidAndPermission">
    delete from
      group_roles
    where
      entity_uuid=#{entityUuid,jdbcType=VARCHAR}
      and role=#{permission,jdbcType=VARCHAR}
  </delete>

  <delete id="delete" parameterType="map">
    delete from group_roles
    where
    role=#{permission,jdbcType=VARCHAR} and
    organization_uuid=#{organizationUuid,jdbcType=VARCHAR} and
    <choose>
      <when test="entityUuid != null">
        entity_uuid=#{entityUuid,jdbcType=BIGINT}
      </when>
      <otherwise>
        entity_uuid is null
      </otherwise>
    </choose>
    and
    <choose>
      <when test="groupUuid != null">
        group_uuid=#{groupUuid,jdbcType=VARCHAR}
      </when>
      <otherwise>
        group_uuid is null
      </otherwise>
    </choose>
  </delete>
</mapper>
