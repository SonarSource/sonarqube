<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">

<mapper namespace="org.sonar.db.permission.UserPermissionMapper">

  <select id="selectUserPermissionsByQueryAndUserUuids" parameterType="map" resultType="org.sonar.db.permission.UserPermissionDto">
    select
      u.uuid as userUuid,
      ur.organization_uuid as organizationUuid,
      ur.entity_uuid as entityUuid,
      ur.role as permission
    <include refid="sqlQueryJoins"/>
    <where>
      u.uuid in <foreach collection="userUuids" open="(" close=")" item="userUuid" separator=",">#{userUuid,jdbcType=VARCHAR}</foreach>
      <include refid="sqlQueryFilters"/>
    </where>
  </select>

  <select id="selectUserUuidsByQuery" parameterType="map" resultType="String">
    select
      u.uuid, lower(u.name)
    <include refid="sqlQueryJoins"/>
    <where>
      <include refid="sqlQueryFilters"/>
    </where>
    group by u.uuid, lower(u.name)
    order by case when (count(ur.role) > 0) then 1 else 2 end asc, lower(u.name) asc
  </select>

  <select id="selectUserUuidsByQueryAndScope" parameterType="map" resultType="String">
    select
    u.uuid, lower(u.name)
    from users u
    left join user_roles ur on ur.user_uuid = u.uuid and ur.organization_uuid=#{query.organizationUuid,jdbcType=VARCHAR}
    <choose>
      <when test="query.entityUuid == null">
        and ur.entity_uuid is null
      </when>
      <otherwise>
        and ur.entity_uuid = #{query.entityUuid,jdbcType=VARCHAR}
      </otherwise>
    </choose>
    left join (<include refid="org.sonar.db.entity.EntityMapper.selectAll"/>) entity on ur.entity_uuid = entity.uuid
    inner join organization_members om on u.uuid = om.user_uuid and om.organization_uuid=#{query.organizationUuid,jdbcType=VARCHAR}
    <where>
      <include refid="sqlQueryFilters"/>
    </where>
    group by u.uuid, lower(u.name)
    order by case when (count(distinct ur.role) > 0) then 1 else 2 end asc, lower(u.name) asc
  </select>

  <select id="countUsersByQuery" parameterType="map" resultType="int">
    select count(distinct(u.uuid))
    <include refid="sqlQueryJoins"/>
    <where>
      <include refid="sqlQueryFilters"/>
    </where>
  </select>

  <sql id="sqlQueryJoins">
    from users u
    left join user_roles ur on ur.user_uuid = u.uuid
    left join (<include refid="org.sonar.db.entity.EntityMapper.selectAll"/>) entity on ur.entity_uuid = entity.uuid
    inner join organization_members om on u.uuid = om.user_uuid and om.organization_uuid = #{query.organizationUuid,jdbcType=VARCHAR}
  </sql>

  <sql id="sqlQueryFilters">
    and u.active = ${_true}
    <if test="query.searchQueryToSql != null">
      and (
      lower(u.name) like #{query.searchQueryToSqlLowercase,jdbcType=VARCHAR} ESCAPE '/'
      or lower(u.email) like #{query.searchQueryToSql,jdbcType=VARCHAR} ESCAPE '/'
      or lower(u.login) like #{query.searchQueryToSql,jdbcType=VARCHAR} ESCAPE '/')
    </if>
    <!-- filter rows with user permissions -->
    <if test="query.withAtLeastOnePermission()">
      and ur.organization_uuid = om.organization_uuid
      and ur.role is not null
      <if test="query.entityUuid == null">
        and ur.entity_uuid is null
      </if>
      <if test="query.entityUuid != null">
        and entity.uuid = #{query.entityUuid,jdbcType=VARCHAR}
      </if>
      <if test="query.permission!=null">
        and ur.role = #{query.permission,jdbcType=VARCHAR}
      </if>
    </if>
  </sql>

  <select id="selectGlobalPermissionsOfUser" parameterType="map" resultType="string">
    select ur.role
    from user_roles ur
    where
    ur.organization_uuid = #{organizationUuid,jdbcType=VARCHAR} and
    ur.user_uuid = #{userUuid,jdbcType=VARCHAR} and
    ur.entity_uuid is null
  </select>

  <select id="selectEntityPermissionsOfUser" parameterType="map" resultType="string">
    select ur.role
    from user_roles ur
    where
    ur.user_uuid = #{userUuid,jdbcType=VARCHAR} and
    ur.entity_uuid = #{entityUuid,jdbcType=VARCHAR}
  </select>

  <select id="countUsersByEntityPermission" resultType="org.sonar.db.permission.CountPerEntityPermission">
    select ur.entity_uuid as entityUuid, ur.role as permission, count(u.login) as count
    from users u
    inner join user_roles ur on ur.user_uuid = u.uuid
    inner join (<include refid="org.sonar.db.entity.EntityMapper.selectAll"/>) entity on ur.entity_uuid = entity.uuid
    where u.active = ${_true}
    and entity.uuid in <foreach collection="entityUuids" open="(" close=")" item="entityUuid" separator=",">#{entityUuid}</foreach>
    group by ur.entity_uuid, ur.role
  </select>

  <select id="selectUserIdsWithPermissionOnEntityBut" resultType="org.sonar.db.user.UserIdDto">
    select
      distinct ur1.user_uuid, u.login
    from
      user_roles ur1 inner join users u on ur1.user_uuid = u.uuid
    where
      ur1.entity_uuid = #{entityUuid,jdbcType=VARCHAR}
      and role &lt;&gt; #{permission,jdbcType=VARCHAR}
      and not exists (
        select
          1
        from
          user_roles ur2
        where
          ur2.entity_uuid = ur1.entity_uuid
          and ur2.user_uuid = ur1.user_uuid
          and role = #{permission,jdbcType=VARCHAR}
      )
  </select>

  <insert id="insert" parameterType="org.sonar.db.permission.UserPermissionDto" useGeneratedKeys="false">
    insert into user_roles (
    uuid,
    organization_uuid,
    user_uuid,
    entity_uuid,
    role
    ) values (
    #{dto.uuid,jdbcType=VARCHAR},
    #{dto.organizationUuid,jdbcType=VARCHAR},
    #{dto.userUuid,jdbcType=VARCHAR},
    #{dto.entityUuid,jdbcType=VARCHAR},
    #{dto.permission,jdbcType=VARCHAR}
    )
  </insert>

  <delete id="deleteGlobalPermission" parameterType="map">
    delete from user_roles
    where
    role = #{permission,jdbcType=VARCHAR} and
    user_uuid = #{userUuid,jdbcType=VARCHAR} and
    organization_uuid = #{organizationUuid,jdbcType=VARCHAR} and
    entity_uuid is null
  </delete>

  <delete id="deleteEntityPermission" parameterType="map">
    delete from user_roles
    where
    role = #{permission,jdbcType=VARCHAR} and
    user_uuid = #{userUuid,jdbcType=VARCHAR} and
    entity_uuid = #{entityUuid,jdbcType=VARCHAR}
  </delete>

  <delete id="deleteEntityPermissions" parameterType="map">
    delete from user_roles
    where
    entity_uuid = #{entityUuid,jdbcType=VARCHAR}
  </delete>

  <delete id="deleteEntityPermissionOfAnyUser" parameterType="map">
    delete from
      user_roles
    where
      entity_uuid = #{entityUuid,jdbcType=VARCHAR}
      and role = #{permission,jdbcType=VARCHAR}
  </delete>

  <delete id="deleteByOrganization" parameterType="String">
    delete from
    user_roles
    where
    organization_uuid = #{organizationUuid,jdbcType=VARCHAR}
  </delete>

  <delete id="deleteOrganizationMemberPermissions" parameterType="map">
    delete from
    user_roles
    where
    organization_uuid = #{organizationUuid,jdbcType=VARCHAR} and
    user_uuid = #{userUuid,jdbcType=VARCHAR}
  </delete>

  <delete id="deleteByUserUuid" parameterType="String">
    DELETE FROM user_roles WHERE user_uuid=#{userUuid,jdbcType=VARCHAR}
  </delete>

  <select id="selectByUserUuid" parameterType="String" resultType="org.sonar.db.permission.UserPermissionDto">
    select
      user_uuid as userUuid,
      organization_uuid as organizationUuid,
      entity_uuid as entityUuid,
      role as permission
    from user_roles
    where user_uuid = #{userUuid,jdbcType=VARCHAR}
  </select>
</mapper>
