<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">

<mapper namespace="org.sonar.db.user.UserMapper">

    <sql id="userColumns">
        u.uuid as uuid,
        u.login as login,
        u.name as name,
        u.email as email,
        u.active as "active",
        u.salt as "salt",
        u.crypted_password as "cryptedPassword",
        u.hash_method as "hashMethod",
        u.external_id as "externalId",
        u.external_login as "externalLogin",
        u.external_identity_provider as "externalIdentityProvider",
        u.user_local as "local",
        u.is_root as "root",
        u.reset_password as "resetPassword",
        u.homepage_type as "homepageType",
        u.homepage_parameter as "homepageParameter",
        u.last_connection_date as "lastConnectionDate",
        u.last_sonarlint_connection as "lastSonarlintConnectionDate",
        u.created_at as "createdAt",
        u.updated_at as "updatedAt",
        u.onboarded as "onboarded"
    </sql>

  <sql id="usersAndScmAccountsColumns">
    sa.scm_account as "scm_account",
    <include refid="userColumns"/>
  </sql>


  <sql id="leftOuterJoinScmAccounts">
      left outer join scm_accounts sa on
        sa.user_uuid = u.uuid
  </sql>

  <sql id="selectFromUsersAndJoinScmAccounts">
    SELECT
    <include refid="usersAndScmAccountsColumns"/>
    FROM users u
    <include refid="leftOuterJoinScmAccounts"/>
  </sql>

  <resultMap id="userResultMap" type="org.sonar.db.user.UserDto" autoMapping="true">
    <id property="uuid" column="uuid"/>
    <collection property="scmAccounts" javaType="list" ofType="java.lang.String">
      <result column="scm_account"/>
    </collection>
  </resultMap>

    <select id="selectByUuid" parameterType="String" resultMap="userResultMap">
        <include refid="selectFromUsersAndJoinScmAccounts"/>
        WHERE u.uuid=#{uuid, jdbcType=VARCHAR}
    </select>

    <select id="selectByLogin" parameterType="String" resultMap="userResultMap">
        <include refid="selectFromUsersAndJoinScmAccounts"/>
        WHERE u.login=#{login, jdbcType=VARCHAR}
    </select>

    <select id="selectNullableByScmAccountOrLoginOrEmail" parameterType="map" resultMap="userResultMap">
        <include refid="selectFromUsersAndJoinScmAccounts"/>
        WHERE uuid IN (
          SELECT
          u.uuid
          FROM users u
          <include refid="leftOuterJoinScmAccounts"/>
          WHERE
          u.login=#{scmAccount, jdbcType=VARCHAR}
          OR u.email=#{scmAccount, jdbcType=VARCHAR}
          OR sa.scm_account=#{scmAccount, jdbcType=VARCHAR}
        )
    </select>

    <select id="selectUserByLogin" parameterType="string" resultMap="userResultMap">
        <include refid="selectFromUsersAndJoinScmAccounts"/>
        WHERE u.login=#{id, jdbcType=INTEGER} AND u.active=${_true}
    </select>

    <select id="selectByLogins" parameterType="string" resultMap="userResultMap">
        <include refid="selectFromUsersAndJoinScmAccounts"/>
        WHERE u.login in
        <foreach collection="list" open="(" close=")" item="login" separator=",">
            #{login, jdbcType=VARCHAR}
        </foreach>
    </select>

    <select id="selectByUuids" parameterType="string" resultMap="userResultMap">
        <include refid="selectFromUsersAndJoinScmAccounts"/>
        WHERE u.uuid in
        <foreach collection="list" open="(" close=")" item="uuid" separator=",">
            #{uuid, jdbcType=VARCHAR}
        </foreach>
    </select>

    <select id="scrollAll" resultMap="userResultMap" fetchSize="${_scrollFetchSize}" resultSetType="FORWARD_ONLY" resultOrdered="true">
        <include refid="selectFromUsersAndJoinScmAccounts"/>
        ORDER BY u.uuid, sa.scm_account
    </select>

    <select id="selectUsers" parameterType="map" resultMap="userResultMap">
        <include refid="selectFromUsersAndJoinScmAccounts"/>
        <include refid="searchByQueryWhereClause"/>
        ORDER BY u.login
        <include refid="org.sonar.db.common.Common.pagination"/>
    </select>

    <select id="countByQuery" parameterType="map" resultType="int">
        SELECT count(1)
            FROM users u
        <include refid="searchByQueryWhereClause"/>
    </select>

    <sql id="searchByQueryInnerQueryColumns">
        u.uuid,
        u.login,
        u.name,
        u.email,
        u.active,
        u.salt,
        u.crypted_password,
        u.hash_method,
        u.external_id,
        u.external_login,
        u.external_identity_provider,
        u.user_local,
        u.reset_password,
        u.homepage_type,
        u.homepage_parameter,
        u.last_connection_date,
        u.last_sonarlint_connection,
        u.created_at,
        u.updated_at
    </sql>

    <sql id="searchByQueryWhereClause">
         <where>
             1=1
            <if test="query.isActive != null">
                AND u.active=#{query.isActive, jdbcType=BOOLEAN}
            </if>
            <if test="query.userUuids != null">
                AND u.uuid in
                <foreach collection="query.userUuids" open="(" close=")" item="userUuid" separator=",">
                    #{userUuid, jdbcType=VARCHAR}
                </foreach>
            </if>
            <if test="query.searchText != null">
                AND (
                    (lower(u.login) LIKE lower(#{query.searchText, jdbcType=VARCHAR}) ESCAPE '/')
                    OR (lower(u.name) LIKE lower(#{query.searchText, jdbcType=VARCHAR}) ESCAPE '/')
                    OR (lower(u.email) LIKE lower(#{query.searchText, jdbcType=VARCHAR}) ESCAPE '/')
                )
            </if>
            <if test="query.isManagedSqlClause != null">
                AND ${query.isManagedSqlClause}
            </if>
            <if test="query.lastConnectionDateFrom != null">
                AND u.last_connection_date &gt;= #{query.lastConnectionDateFrom, jdbcType=BIGINT}
            </if>
            <if test="query.lastConnectionDateTo != null">
                AND (u.last_connection_date is null or u.last_connection_date &lt; #{query.lastConnectionDateTo, jdbcType=BIGINT})
            </if>
            <if test="query.sonarLintLastConnectionDateFrom != null">
                AND u.last_sonarlint_connection &gt;= #{query.sonarLintLastConnectionDateFrom, jdbcType=BIGINT}
            </if>
            <if test="query.sonarLintLastConnectionDateTo != null">
                AND (u.last_sonarlint_connection is null or u.last_sonarlint_connection &lt; #{query.sonarLintLastConnectionDateTo, jdbcType=BIGINT})
            </if>
            <if test="query.externalLogin != null">
                AND (u.external_login = #{query.externalLogin, jdbcType=VARCHAR})
            </if>
            <if test="query.groupUuid != null">
                AND exists (select 1 from groups_users ug where ug.user_uuid = u.uuid AND ug.group_uuid=#{query.groupUuid, jdbcType=VARCHAR})
            </if>
            <if test="query.excludedGroupUuid != null">
                AND NOT exists (select 1 from groups_users ug where ug.user_uuid = u.uuid AND ug.group_uuid=#{query.excludedGroupUuid, jdbcType=VARCHAR})
            </if>
           <if test="query.organizationUuids != null and query.organizationUuids.size() > 0">
             AND exists (SELECT 1 FROM organization_members om WHERE om.user_uuid = u.uuid AND om.organization_uuid IN
             <foreach collection="query.organizationUuids" open="(" close=")" item="uuid" separator=",">
               #{uuid, jdbcType=VARCHAR}
             </foreach>
             )
           </if>
        </where>
    </sql>

    <select id="selectUsersForTelemetry" parameterType="map" resultType="UserTelemetry">
        SELECT
            u.uuid as uuid,
            u.active as "active",
            u.external_identity_provider as "externalIdentityProvider",
            u.last_connection_date as "lastConnectionDate",
            u.last_sonarlint_connection as "lastSonarlintConnectionDate",
            su.scim_uuid as "scimUuid"
        FROM users u
        LEFT JOIN scim_users su on su.user_uuid = u.uuid
        ORDER BY u.uuid
    </select>

    <select id="selectByEmail" parameterType="String" resultMap="userResultMap">
        <include refid="selectFromUsersAndJoinScmAccounts"/>
        WHERE lower(u.email)=#{email, jdbcType=VARCHAR}
        AND u.active=${_true}
    </select>

    <select id="selectExternalIdentityProviders" resultType="string">
        SELECT distinct(external_identity_provider) from users
    </select>

    <select id="selectByExternalIdAndIdentityProvider" parameterType="map" resultMap="userResultMap">
        <include refid="selectFromUsersAndJoinScmAccounts"/>
        WHERE u.external_id=#{externalId, jdbcType=VARCHAR} AND u.external_identity_provider=#{externalIdentityProvider, jdbcType=VARCHAR}
    </select>

    <select id="selectByExternalIdsAndIdentityProvider" parameterType="map" resultMap="userResultMap">
        <include refid="selectFromUsersAndJoinScmAccounts"/>
        WHERE u.external_identity_provider=#{externalIdentityProvider, jdbcType=VARCHAR}
        AND u.external_id in
        <foreach collection="externalIds" open="(" close=")" item="externalId" separator=",">
            #{externalId, jdbcType=VARCHAR}
        </foreach>
    </select>

    <select id="selectByExternalLoginAndIdentityProvider" parameterType="map" resultMap="userResultMap">
        <include refid="selectFromUsersAndJoinScmAccounts"/>
        WHERE u.external_login=#{externalLogin, jdbcType=VARCHAR} AND u.external_identity_provider=#{externalIdentityProvider, jdbcType=VARCHAR}
    </select>

    <sql id="deactivateUserUpdatedFields">
        active = ${_false},
        email = null,
        salt = null,
        crypted_password = null,
        last_connection_date = null,
        last_sonarlint_connection = null,
        updated_at = #{now, jdbcType=BIGINT}
    </sql>

    <update id="updateSonarlintLastConnectionDate" parameterType="map">
        update users set
        last_sonarlint_connection = #{now, jdbcType=BIGINT}
        where
        login = #{login, jdbcType=VARCHAR}
    </update>

    <update id="deactivateUser" parameterType="map">
        update users set
        <include refid="deactivateUserUpdatedFields"/>
        where
        login = #{login, jdbcType=VARCHAR}
    </update>

    <update id="clearHomepages" parameterType="map">
        update users set
        homepage_type = null,
        homepage_parameter = null,
        updated_at = #{now, jdbcType=BIGINT}
        where
        homepage_type = #{homepageType, jdbcType=VARCHAR}
        and homepage_parameter = #{homepageParameter, jdbcType=VARCHAR}
    </update>

    <update id="clearHomepage" parameterType="map">
        update users set
        homepage_type = null,
        homepage_parameter = null,
        updated_at = #{now, jdbcType=BIGINT}
        where
        login = #{login, jdbcType=VARCHAR}
    </update>

    <insert id="insert" parameterType="map" useGeneratedKeys="false">
        insert into users (
        uuid,
        login,
        name,
        email,
        active,
        external_id,
        external_login,
        external_identity_provider,
        user_local,
        salt,
        crypted_password,
        hash_method,
        last_sonarlint_connection,
        reset_password,
        homepage_type,
        homepage_parameter,
        created_at,
        updated_at,
        onboarded
        ) values (
        #{user.uuid,jdbcType=VARCHAR},
        #{user.login,jdbcType=VARCHAR},
        #{user.name,jdbcType=VARCHAR},
        #{user.email,jdbcType=VARCHAR},
        #{user.active,jdbcType=BOOLEAN},
        #{user.externalId,jdbcType=VARCHAR},
        #{user.externalLogin,jdbcType=VARCHAR},
        #{user.externalIdentityProvider,jdbcType=VARCHAR},
        #{user.local,jdbcType=BOOLEAN},
        #{user.salt,jdbcType=VARCHAR},
        #{user.cryptedPassword,jdbcType=VARCHAR},
        #{user.hashMethod,jdbcType=VARCHAR},
        #{user.lastSonarlintConnectionDate,jdbcType=BIGINT},
        #{user.resetPassword,jdbcType=BOOLEAN},
        #{user.homepageType,jdbcType=VARCHAR},
        #{user.homepageParameter,jdbcType=VARCHAR},
        #{user.createdAt,jdbcType=BIGINT},
        #{user.updatedAt,jdbcType=BIGINT},
        #{user.onboarded, jdbcType=BOOLEAN}
        )
    </insert>

    <update id="update" parameterType="map">
        update users set
        login = #{user.login, jdbcType=VARCHAR},
        name = #{user.name, jdbcType=VARCHAR},
        email = #{user.email, jdbcType=VARCHAR},
        active = #{user.active, jdbcType=BOOLEAN},
        external_id = #{user.externalId, jdbcType=VARCHAR},
        external_login = #{user.externalLogin, jdbcType=VARCHAR},
        external_identity_provider = #{user.externalIdentityProvider, jdbcType=VARCHAR},
        user_local = #{user.local, jdbcType=BOOLEAN},
        reset_password = #{user.resetPassword, jdbcType=BOOLEAN},
        salt = #{user.salt, jdbcType=VARCHAR},
        crypted_password = #{user.cryptedPassword, jdbcType=BIGINT},
        hash_method = #{user.hashMethod, jdbcType=VARCHAR},
        homepage_type = #{user.homepageType, jdbcType=VARCHAR},
        homepage_parameter = #{user.homepageParameter, jdbcType=VARCHAR},
        last_connection_date = #{user.lastConnectionDate,jdbcType=BIGINT},
        last_sonarlint_connection = #{user.lastSonarlintConnectionDate,jdbcType=BIGINT},
        updated_at = #{user.updatedAt,jdbcType=BIGINT},
        onboarded = #{user.onboarded, jdbcType=BOOLEAN}
        where
        uuid = #{user.uuid, jdbcType=VARCHAR}
    </update>

    <select id="countActiveSonarlintUsers" parameterType="map" resultType="long">
        select count(login) from users
        where last_sonarlint_connection > #{sinceDate,jdbcType=BIGINT}
    </select>

    <select id="countActiveUsers" resultType="long">
        select count(1) from users u WHERE u.active=${_true}
    </select>

    <insert id="insertScmAccount" parameterType="map" useGeneratedKeys="false">
      insert into scm_accounts (
      user_uuid,
      scm_account
      ) values (
      #{userUuid,jdbcType=VARCHAR},
      #{scmAccount,jdbcType=VARCHAR}
      )
    </insert>

    <delete id="deleteAllScmAccounts" parameterType="map">
      delete from scm_accounts
      where
      user_uuid = #{userUuid,jdbcType=VARCHAR}
    </delete>

    <select id="selectActiveUsersByScmAccountOrLoginOrEmail" parameterType="String" resultType="org.sonar.db.user.UserIdDto">
      select u.uuid, u.login
      from scm_accounts sa
      left join users u on sa.user_uuid = u.uuid
      where u.active=${_true} and sa.scm_account = lower(#{scmAccount,jdbcType=VARCHAR})
      union
      select uuid, login
      from users u
      where active=${_true} and (login=#{scmAccount,jdbcType=VARCHAR} or lower(email)=lower(#{scmAccount,jdbcType=VARCHAR}) )
    </select>

</mapper>
