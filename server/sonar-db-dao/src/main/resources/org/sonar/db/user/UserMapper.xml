<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">

<mapper namespace="org.sonar.db.user.UserMapper">

    <sql id="userColumns">
        u.uuid as uuid,
        u.login as login,
        u.name as name,
        u.email as email,
        u.active as "active",
        u.scm_accounts as "scmAccounts",
        u.salt as "salt",
        u.crypted_password as "cryptedPassword",
        u.hash_method as "hashMethod",
        u.external_id as "externalId",
        u.external_login as "externalLogin",
        u.external_identity_provider as "externalIdentityProvider",
        u.user_local as "local",
        u.is_root as "root",
        u.reset_password as "resetPassword",
        u.homepage_type as "homepageType",
        u.homepage_parameter as "homepageParameter",
        u.last_connection_date as "lastConnectionDate",
        u.last_sonarlint_connection as "lastSonarlintConnectionDate",
        u.created_at as "createdAt",
        u.updated_at as "updatedAt"
    </sql>

    <select id="selectByUuid" parameterType="String" resultType="User">
        SELECT
        <include refid="userColumns"/>
        FROM users u
        WHERE u.uuid=#{uuid, jdbcType=VARCHAR}
    </select>

    <select id="selectByLogin" parameterType="String" resultType="User">
        SELECT
        <include refid="userColumns"/>
        FROM users u
        WHERE u.login=#{login, jdbcType=VARCHAR}
    </select>

    <select id="selectNullableByScmAccountOrLoginOrEmail" parameterType="map" resultType="User">
        SELECT
        <include refid="userColumns"/>
        FROM users u
        WHERE
        u.login=#{scmAccount, jdbcType=VARCHAR}
        OR u.email=#{scmAccount, jdbcType=VARCHAR}
        OR u.scm_accounts like #{likeScmAccount, jdbcType=VARCHAR}
    </select>

    <select id="selectUserByLogin" parameterType="string" resultType="User">
        SELECT
        <include refid="userColumns"/>
        FROM users u
        WHERE u.login=#{id, jdbcType=INTEGER} AND u.active=${_true}
    </select>

    <select id="selectByLogins" parameterType="string" resultType="User">
        SELECT
        <include refid="userColumns"/>
        FROM users u
        WHERE u.login in
        <foreach collection="list" open="(" close=")" item="login" separator=",">
            #{login, jdbcType=VARCHAR}
        </foreach>
    </select>

    <select id="selectByUuids" parameterType="string" resultType="User">
        SELECT
        <include refid="userColumns"/>
        FROM users u
        WHERE u.uuid in
        <foreach collection="list" open="(" close=")" item="uuid" separator=",">
            #{uuid, jdbcType=VARCHAR}
        </foreach>
    </select>

    <select id="scrollAll" resultType="User" fetchSize="${_scrollFetchSize}" resultSetType="FORWARD_ONLY">
        select
        <include refid="userColumns"/>
        from users u
    </select>

    <select id="selectUsers" parameterType="map" resultType="User">
        SELECT
        <include refid="userColumns"/>
        FROM users u
        <where>
            <if test="logins != null and logins.size() > 0">
                u.login IN
                <foreach item="login" index="index" collection="logins" open="(" separator="," close=")">
                    #{login, jdbcType=VARCHAR}
                </foreach>
            </if>
            <if test="includeDeactivated==false">
                AND u.active=${_true}
            </if>
            <if test="searchText != null">
                AND (u.login LIKE #{searchTextSql, jdbcType=VARCHAR} ESCAPE '/' OR u.name LIKE #{searchTextSql, jdbcType=VARCHAR} ESCAPE '/')
            </if>
        </where>
        ORDER BY u.name
    </select>

    <select id="selectUsersForTelemetry" parameterType="map" resultType="UserTelemetry">
        SELECT
            u.uuid as uuid,
            u.active as "active",
            u.external_identity_provider as "externalIdentityProvider",
            u.last_connection_date as "lastConnectionDate",
            u.last_sonarlint_connection as "lastSonarlintConnectionDate"
        FROM users u
        ORDER BY u.uuid
    </select>

    <select id="selectByEmail" parameterType="String" resultType="User">
        SELECT
        <include refid="userColumns"/>
        FROM users u
        WHERE lower(u.email)=#{email, jdbcType=VARCHAR}
        AND u.active=${_true}
    </select>

    <select id="selectExternalIdentityProviders" resultType="string">
        SELECT distinct(external_identity_provider) from users
    </select>

    <select id="selectByExternalIdAndIdentityProvider" parameterType="map" resultType="User">
        SELECT
        <include refid="userColumns"/>
        FROM users u
        WHERE u.external_id=#{externalId, jdbcType=VARCHAR} AND u.external_identity_provider=#{externalIdentityProvider, jdbcType=VARCHAR}
    </select>

    <select id="selectByExternalIdsAndIdentityProvider" parameterType="map" resultType="User">
        SELECT
        <include refid="userColumns"/>
        FROM users u
        WHERE u.external_identity_provider=#{externalIdentityProvider, jdbcType=VARCHAR}
        AND u.external_id in
        <foreach collection="externalIds" open="(" close=")" item="externalId" separator=",">
            #{externalId, jdbcType=VARCHAR}
        </foreach>
    </select>

    <select id="selectByExternalLoginAndIdentityProvider" parameterType="map" resultType="User">
        SELECT
        <include refid="userColumns"/>
        FROM users u
        WHERE u.external_login=#{externalLogin, jdbcType=VARCHAR} AND u.external_identity_provider=#{externalIdentityProvider, jdbcType=VARCHAR}
    </select>

    <sql id="deactivateUserUpdatedFields">
        active = ${_false},
        email = null,
        scm_accounts = null,
        salt = null,
        crypted_password = null,
        last_connection_date = null,
        last_sonarlint_connection = null,
        updated_at = #{now, jdbcType=BIGINT}
    </sql>

    <update id="updateSonarlintLastConnectionDate" parameterType="map">
        update users set
        last_sonarlint_connection = #{now, jdbcType=BIGINT}
        where
        login = #{login, jdbcType=VARCHAR}
    </update>

    <update id="deactivateUser" parameterType="map">
        update users set
        <include refid="deactivateUserUpdatedFields"/>
        where
        login = #{login, jdbcType=VARCHAR}
    </update>

    <update id="clearHomepages" parameterType="map">
        update users set
        homepage_type = null,
        homepage_parameter = null,
        updated_at = #{now, jdbcType=BIGINT}
        where
        homepage_type = #{homepageType, jdbcType=VARCHAR}
        and homepage_parameter = #{homepageParameter, jdbcType=VARCHAR}
    </update>

    <update id="clearHomepage" parameterType="map">
        update users set
        homepage_type = null,
        homepage_parameter = null,
        updated_at = #{now, jdbcType=BIGINT}
        where
        login = #{login, jdbcType=VARCHAR}
    </update>

    <insert id="insert" parameterType="map" useGeneratedKeys="false">
        insert into users (
        uuid,
        login,
        name,
        email,
        active,
        scm_accounts,
        external_id,
        external_login,
        external_identity_provider,
        user_local,
        salt,
        crypted_password,
        hash_method,
        last_sonarlint_connection,
        reset_password,
        homepage_type,
        homepage_parameter,
        created_at,
        updated_at
        ) values (
        #{user.uuid,jdbcType=VARCHAR},
        #{user.login,jdbcType=VARCHAR},
        #{user.name,jdbcType=VARCHAR},
        #{user.email,jdbcType=VARCHAR},
        #{user.active,jdbcType=BOOLEAN},
        #{user.scmAccounts,jdbcType=VARCHAR},
        #{user.externalId,jdbcType=VARCHAR},
        #{user.externalLogin,jdbcType=VARCHAR},
        #{user.externalIdentityProvider,jdbcType=VARCHAR},
        #{user.local,jdbcType=BOOLEAN},
        #{user.salt,jdbcType=VARCHAR},
        #{user.cryptedPassword,jdbcType=VARCHAR},
        #{user.hashMethod,jdbcType=VARCHAR},
        #{user.lastSonarlintConnectionDate,jdbcType=BIGINT},
        #{user.resetPassword,jdbcType=BOOLEAN},
        #{user.homepageType,jdbcType=VARCHAR},
        #{user.homepageParameter,jdbcType=VARCHAR},
        #{user.createdAt,jdbcType=BIGINT},
        #{user.updatedAt,jdbcType=BIGINT}
        )
    </insert>

    <update id="update" parameterType="map">
        update users set
        login = #{user.login, jdbcType=VARCHAR},
        name = #{user.name, jdbcType=VARCHAR},
        email = #{user.email, jdbcType=VARCHAR},
        active = #{user.active, jdbcType=BOOLEAN},
        scm_accounts = #{user.scmAccounts, jdbcType=VARCHAR},
        external_id = #{user.externalId, jdbcType=VARCHAR},
        external_login = #{user.externalLogin, jdbcType=VARCHAR},
        external_identity_provider = #{user.externalIdentityProvider, jdbcType=VARCHAR},
        user_local = #{user.local, jdbcType=BOOLEAN},
        reset_password = #{user.resetPassword, jdbcType=BOOLEAN},
        salt = #{user.salt, jdbcType=VARCHAR},
        crypted_password = #{user.cryptedPassword, jdbcType=BIGINT},
        hash_method = #{user.hashMethod, jdbcType=VARCHAR},
        homepage_type = #{user.homepageType, jdbcType=VARCHAR},
        homepage_parameter = #{user.homepageParameter, jdbcType=VARCHAR},
        last_connection_date = #{user.lastConnectionDate,jdbcType=BIGINT},
        last_sonarlint_connection = #{user.lastSonarlintConnectionDate,jdbcType=BIGINT},
        updated_at = #{user.updatedAt,jdbcType=BIGINT}
        where
        uuid = #{user.uuid, jdbcType=VARCHAR}
    </update>

    <select id="countActiveSonarlintUsers" parameterType="map" resultType="long">
        select count(login) from users
        where last_sonarlint_connection > #{sinceDate,jdbcType=BIGINT}
    </select>

</mapper>
