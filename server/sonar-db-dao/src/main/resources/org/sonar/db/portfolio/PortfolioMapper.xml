<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">
<mapper namespace="org.sonar.db.portfolio.PortfolioMapper">

  <sql id="portfolioColumns">
    p.uuid as uuid,
    p.kee as kee,
    p.name as name,
    p.description as description,
    p.private as isPrivate,
    p.branch_key as branchKey,
    p.root_uuid as rootUuid,
    p.parent_uuid as parentUuid,
    p.organization_uuid as organizationUuid,
    p.selection_mode as selectionMode,
    p.selection_expression as selectionExpression,
    p.created_at as createdAt,
    p.updated_at as updatedAt,
    case when p.parent_uuid is null then 'VW' else 'SVW' end as qualifier,
    case when p.root_uuid != p.uuid then p.root_uuid else null end as authUuid
  </sql>

  <sql id="projectColumns">
    p.uuid as uuid,
    p.organization_uuid as organizationUuid,
    p.kee as kee,
    p.qualifier as qualifier,
    p.name as name,
    p.description as description,
    p.tags as tagsString,
    p.private as isPrivate,
    p.creation_method as creationMethod,
    p.ai_code_assurance as aiCodeAssurance,
    p.created_at as createdAt,
    p.updated_at as updatedAt
  </sql>

  <sql id="portfolioProjectColumns">
    pp.uuid as portfolioProject_uuid,
    pp.project_uuid as projectUuid,
    pp.portfolio_uuid as portfolioUuid,
    pf.kee as portfolioKey,
    p.kee as projectKey,
    pp.created_at as createdAt,
    ppb.branch_uuid as branchUuid,
    pb.uuid as mainBranchUuid
  </sql>

  <sql id="portfolioReferenceColumns">
    source.uuid as sourceUuid,
    source.root_uuid as sourceRootUuid,
    target.uuid as targetUuid,
    target.root_uuid as targetRootUuid,
    null as branchUuid,
    target.name as targetName,
    target.kee as targetKey
  </sql>

  <sql id="appReferenceColumns">
    source.uuid as sourceUuid,
    source.root_uuid as sourceRootUuid,
    target.uuid as targetUuid,
    target.uuid as targetRootUuid,
    pr.branch_uuid as branchUuid,
    target.name as targetName,
    target.kee as targetKey
  </sql>

  <resultMap id="portfolioProjectResult" type="PortfolioProject" autoMapping="true">
    <id property="uuid" column="portfolioProject_uuid"/>
    <collection property="branchUuids" ofType="string">
      <result column="branchUuid"/>
    </collection>
  </resultMap>

  <resultMap id="referenceResult" type="PortfolioReference" autoMapping="true">
    <id property="sourceUuid" column="sourceUuid"/>
    <id property="targetUuid" column="targetUuid"/>
    <collection property="branchUuids" ofType="string">
      <result column="branchUuid"/>
    </collection>
  </resultMap>

  <select id="selectByUuid" parameterType="String" resultType="Portfolio">
    SELECT
      <include refid="portfolioColumns"/>
    FROM portfolios p
    where
      p.uuid=#{uuid,jdbcType=VARCHAR}
  </select>

  <select id="selectByUuids" parameterType="String" resultType="Portfolio">
    SELECT
    <include refid="portfolioColumns"/>
    FROM portfolios p
    where
    p.uuid in
    <foreach collection="uuids" open="(" close=")" item="uuid" separator=",">
      #{uuid,jdbcType=VARCHAR}
    </foreach>
  </select>

    <select id="selectByKey" parameterType="String" resultType="Portfolio">
    SELECT
      <include refid="portfolioColumns"/>
    FROM portfolios p
    where
      p.kee=#{kee,jdbcType=VARCHAR}
  </select>

  <select id="selectByKeys" parameterType="String" resultType="Portfolio">
    SELECT
    <include refid="portfolioColumns"/>
    FROM portfolios p
    where
    p.kee in
    <foreach collection="keys" open="(" close=")" item="key" separator=",">
      #{key,jdbcType=VARCHAR}
    </foreach>
  </select>

  <select id="selectAll" resultType="Portfolio">
    SELECT
    <include refid="portfolioColumns"/>
    FROM portfolios p
  </select>

  <select id="selectAllRoots" resultType="Portfolio">
    SELECT
      <include refid="portfolioColumns"/>
    FROM portfolios p
    where
      p.parent_uuid is null
  </select>

  <select id="selectPortfolioProjectBranches" resultType="string">
    SELECT ppb.branch_uuid
    FROM portfolio_proj_branches ppb
    WHERE ppb.portfolio_project_uuid = #{id}
  </select>

   <select id="selectPortfolioProjects" resultMap="portfolioProjectResult">
     SELECT
      <include refid="portfolioProjectColumns"/>
     FROM portfolio_projects pp
     INNER JOIN projects p on p.uuid = pp.project_uuid
     INNER JOIN project_branches pb on pb.project_uuid = p.uuid and pb.is_main = ${_true}
     INNER JOIN portfolios pf on pf.uuid = pp.portfolio_uuid
     LEFT OUTER JOIN portfolio_proj_branches ppb on pp.uuid = ppb.portfolio_project_uuid
     WHERE
      pp.portfolio_uuid=#{portfolioUuid,jdbcType=VARCHAR}
  </select>

     <select id="selectPortfolioProject" resultMap="portfolioProjectResult">
     SELECT
      <include refid="portfolioProjectColumns"/>
     FROM portfolio_projects pp
     INNER JOIN projects p on p.uuid = pp.project_uuid
     INNER JOIN project_branches pb on pb.project_uuid = p.uuid and pb.is_main = ${_true}
     INNER JOIN portfolios pf on pf.uuid = pp.portfolio_uuid
     LEFT OUTER JOIN portfolio_proj_branches ppb on pp.uuid = ppb.portfolio_project_uuid
     WHERE
      pp.portfolio_uuid=#{portfolioUuid,jdbcType=VARCHAR}
      and pp.project_uuid=#{projectUuid,jdbcType=VARCHAR}

  </select>

  <select id="selectAllPortfolioProjects" resultMap="portfolioProjectResult">
    SELECT
      <include refid="portfolioProjectColumns"/>
    FROM portfolio_projects pp
    INNER JOIN projects p on p.uuid = pp.project_uuid
    INNER JOIN project_branches pb on pb.project_uuid = p.uuid and pb.is_main = ${_true}
    INNER JOIN portfolios pf on pf.uuid = pp.portfolio_uuid
    LEFT OUTER JOIN portfolio_proj_branches ppb on pp.uuid = ppb.portfolio_project_uuid
  </select>

  <select id="selectAllProjectsInHierarchy" resultMap="portfolioProjectResult">
    SELECT
      <include refid="portfolioProjectColumns"/>
    FROM portfolio_projects pp
       INNER JOIN projects p on p.uuid = pp.project_uuid
       INNER JOIN project_branches pb on pb.project_uuid = p.uuid and pb.is_main = ${_true}
       INNER JOIN portfolios pf on pp.portfolio_uuid = pf.uuid
       LEFT OUTER JOIN portfolio_proj_branches ppb on pp.uuid = ppb.portfolio_project_uuid
    where
       pf.root_uuid = #{rootUuid,jdbcType=VARCHAR}
  </select>

  <select id="selectReferenceUuids" resultType="String">
    SELECT
    p.reference_uuid
    FROM portfolio_references p
    where
    p.portfolio_uuid=#{portfolioUuid,jdbcType=VARCHAR}
  </select>

  <select id="selectRootOfReferencers" resultType="Portfolio">
    SELECT distinct
    <include refid="portfolioColumns"/>
    FROM portfolios c
    INNER JOIN portfolio_references pr on pr.portfolio_uuid = c.uuid
    INNER JOIN portfolios p on p.uuid = c.root_uuid
    where
    pr.reference_uuid=#{referenceUuid,jdbcType=VARCHAR}
  </select>

  <select id="selectRootOfReferencersToMainBranch" resultType="Portfolio">
    SELECT distinct
    <include refid="portfolioColumns"/>
    FROM portfolios c
    INNER JOIN portfolio_references pr on pr.portfolio_uuid = c.uuid
    INNER JOIN portfolios p on p.uuid = c.root_uuid
    LEFT JOIN project_branches pb ON pr.branch_uuid = pb.uuid
    where
    pr.reference_uuid=#{referenceUuid,jdbcType=VARCHAR}
    AND
    (pr.branch_uuid is null
    OR
    pb.is_main = ${_true}
    )
  </select>

  <select id="selectRootOfReferencersToAppBranch" resultType="Portfolio">
    SELECT distinct
    <include refid="portfolioColumns"/>
    FROM portfolios c
    INNER JOIN portfolio_references pr on pr.portfolio_uuid = c.uuid
    INNER JOIN portfolios p on p.uuid = c.root_uuid
    INNER JOIN project_branches pb on pb.uuid = pr.branch_uuid
    WHERE
    pr.reference_uuid=#{appUuid,jdbcType=VARCHAR}
    AND
    pb.kee = #{appBranchKey,jdbcType=VARCHAR}
  </select>

  <sql id="applicationProjectColumns">
    ap.application_uuid as appUuid,
    ap.project_uuid as projectUuid,
    p.kee as appKey
  </sql>

  <select id="selectAllApplicationProjects" parameterType="String" resultType="ApplicationProject">
    SELECT
    <include refid="applicationProjectColumns"/>
    FROM portfolio_references pr
    INNER JOIN projects p ON p.uuid = pr.reference_uuid
    INNER JOIN portfolios pf ON pr.portfolio_uuid = pf.uuid
    INNER JOIN app_projects ap ON ap.application_uuid = p.uuid
    WHERE pf.root_uuid = #{rootPortfolioUuid}
  </select>

  <select id="selectTree" parameterType="String" resultType="Portfolio">
    SELECT
    <include refid="portfolioColumns"/>
    FROM portfolios p
    INNER JOIN portfolios p2 ON p.root_uuid = p2.root_uuid
    WHERE p2.uuid=#{portfolioUuid,jdbcType=VARCHAR}
  </select>

  <select id="selectReferencers" resultType="Portfolio">
    SELECT
    <include refid="portfolioColumns"/>
    FROM portfolios p
    INNER JOIN portfolio_references pr ON p.uuid = pr.portfolio_uuid
    WHERE pr.reference_uuid=#{referenceUuid,jdbcType=VARCHAR}
  </select>

  <delete id="deleteReference">
    DELETE FROM portfolio_references
    WHERE
    portfolio_uuid = #{portfolioUuid,jdbcType=VARCHAR}
    AND reference_uuid = #{referenceUuid,jdbcType=VARCHAR}
  </delete>

  <delete id="deleteReferenceBranch">
    DELETE FROM portfolio_references
    WHERE portfolio_uuid = #{portfolioUuid,jdbcType=VARCHAR}
    AND reference_uuid = #{referenceUuid,jdbcType=VARCHAR}
    AND branch_uuid = #{branchUuid,jdbcType=VARCHAR}
  </delete>

  <select id="selectReferenceToApplication" resultMap="referenceResult">
    SELECT
    <include refid="appReferenceColumns"/>
    FROM portfolio_references pr
    INNER JOIN portfolios source ON pr.portfolio_uuid = source.uuid
    INNER JOIN projects target ON pr.reference_uuid = target.uuid AND target.qualifier = 'APP'
    WHERE pr.portfolio_uuid = #{portfolioUuid,jdbcType=VARCHAR}
    AND target.kee=#{referenceKey,jdbcType=VARCHAR}
  </select>

  <select id="selectReferenceToPortfolio" resultMap="referenceResult">
    SELECT
    <include refid="portfolioReferenceColumns"/>
    FROM portfolio_references pr
    INNER JOIN portfolios source ON pr.portfolio_uuid = source.uuid
    INNER JOIN portfolios target ON pr.reference_uuid = target.uuid
    WHERE pr.portfolio_uuid = #{portfolioUuid,jdbcType=VARCHAR}
    AND target.kee=#{referenceKey,jdbcType=VARCHAR}
  </select>

   <select id="selectUuidsByKey" parameterType="string" resultType="KeyWithUuid">
    SELECT ptf.kee, ptf.uuid
    FROM portfolios ptf
    INNER JOIN
    portfolios root ON root.uuid = ptf.root_uuid
    WHERE root.kee = #{rootKey,jdbcType=VARCHAR}
   </select>

   <insert id="insert" parameterType="Portfolio">
    INSERT INTO portfolios (
      kee,
      uuid,
      name,
      description,
      private,
      root_uuid,
      parent_uuid,
      organization_uuid,
      branch_key,
      selection_mode,
      selection_expression,
      created_at,
      updated_at
    )
    VALUES (
    #{kee,jdbcType=VARCHAR},
    #{uuid,jdbcType=VARCHAR},
    #{name,jdbcType=VARCHAR},
    #{description,jdbcType=VARCHAR},
    #{isPrivate,jdbcType=BOOLEAN},
    #{rootUuid,jdbcType=VARCHAR},
    #{parentUuid,jdbcType=VARCHAR},
    #{organizationUuid,jdbcType=VARCHAR},
    #{branchKey,jdbcType=VARCHAR},
    #{selectionMode,jdbcType=VARCHAR},
    #{selectionExpression,jdbcType=VARCHAR},
    #{createdAt,jdbcType=BIGINT},
    #{updatedAt,jdbcType=BIGINT}
    )
  </insert>

  <select id="selectAllReferencesToPortfolios" resultMap="referenceResult">
    SELECT
    <include refid="portfolioReferenceColumns"/>
    FROM portfolio_references pr
    INNER JOIN portfolios source ON pr.portfolio_uuid = source.uuid
    INNER JOIN portfolios target ON pr.reference_uuid = target.uuid
  </select>

  <select id="selectAllReferencesToApplications" resultMap="referenceResult">
    SELECT
    <include refid="appReferenceColumns"/>
    FROM portfolio_references pr
    INNER JOIN portfolios source ON pr.portfolio_uuid = source.uuid
    INNER JOIN projects target ON pr.reference_uuid = target.uuid
    WHERE target.qualifier = 'APP'
  </select>

  <select id="selectAllReferencesToPortfoliosInHierarchy" resultMap="referenceResult">
    SELECT
    <include refid="portfolioReferenceColumns"/>
    FROM portfolio_references pr
    INNER JOIN portfolios source ON pr.portfolio_uuid = source.uuid
    INNER JOIN portfolios target ON pr.reference_uuid = target.uuid
    WHERE source.root_uuid = #{rootUuid,jdbcType=VARCHAR}
  </select>

  <select id="selectAllReferencesToApplicationsInHierarchy" resultMap="referenceResult">
    SELECT
    <include refid="appReferenceColumns"/>
    FROM portfolio_references pr
    INNER JOIN portfolios source ON pr.portfolio_uuid = source.uuid
    INNER JOIN projects target ON pr.reference_uuid = target.uuid
    WHERE target.qualifier = 'APP'
    AND source.root_uuid = #{rootUuid,jdbcType=VARCHAR}
  </select>

  <select id="selectApplicationReferenceUuids" resultType="String">
    SELECT
    p.uuid
    FROM portfolio_references pr
    JOIN projects p ON p.uuid = pr.reference_uuid
    WHERE pr.portfolio_uuid = #{portfolioUuid,jdbcType=VARCHAR}
  </select>

  <sql id="deletePortfolioQuery">
    DELETE FROM portfolio_proj_branches
    WHERE portfolio_project_uuid in (select uuid FROM portfolio_projects WHERE portfolio_uuid = #{uuid,jdbcType=VARCHAR});

    DELETE FROM portfolio_projects
    WHERE portfolio_uuid = #{uuid,jdbcType=VARCHAR};

    DELETE FROM portfolios WHERE uuid = #{uuid,jdbcType=VARCHAR};
  </sql>

  <delete id="deletePortfolio" parameterType="String">
    <include refid="deletePortfolioQuery"/>
  </delete>

  <delete id="deletePortfolio" parameterType="String" databaseId="oracle">
    BEGIN
    <include refid="deletePortfolioQuery"/>
    END;
  </delete>

  <delete id="deleteReferencesByPortfolioOrReferenceUuids" parameterType="String">
    DELETE FROM portfolio_references WHERE portfolio_uuid in
    <foreach collection="uuids" open="(" close=")" item="uuid" separator=",">#{uuid,jdbcType=VARCHAR}</foreach>
    OR reference_uuid in
    <foreach collection="uuids" open="(" close=")" item="uuid" separator=",">#{uuid,jdbcType=VARCHAR}</foreach>
  </delete>

  <delete id="deleteAllDescendantPortfolios" parameterType="String">
    DELETE FROM portfolios WHERE root_uuid = #{rootUuid,jdbcType=VARCHAR} and parent_uuid is not null
  </delete>

  <delete id="deleteAllReferences" parameterType="String">
    DELETE FROM portfolio_references
  </delete>

  <sql id="deleteAllProjectsQuery">
    DELETE FROM portfolio_projects;
    DELETE FROM portfolio_proj_branches;
  </sql>

  <delete id="deleteAllProjects" parameterType="String">
    <include refid="deleteAllProjectsQuery"/>
  </delete>

  <delete id="deleteAllProjects" parameterType="String" databaseId="oracle">
    BEGIN
    <include refid="deleteAllProjectsQuery"/>
    END;
  </delete>

  <insert id="insertReference" parameterType="map">
    INSERT INTO portfolio_references (
      uuid,
      portfolio_uuid,
      reference_uuid,
      branch_uuid,
      created_at
    )
    VALUES (
      #{uuid,jdbcType=VARCHAR},
      #{portfolioUuid,jdbcType=VARCHAR},
      #{referenceUuid,jdbcType=VARCHAR},
      #{branchUuid,jdbcType=VARCHAR},
      #{createdAt,jdbcType=BIGINT}
    )
  </insert>

  <select id="selectReferencesTo" parameterType="String">
    SELECT
      <include refid="portfolioColumns"/>
    FROM portfolios p
    INNER JOIN portfolio_references pr ON p.uuid = pr.portfolio_uuid
    WHERE pr.reference_uuid =  #{referenceUuid,jdbcType=VARCHAR}
  </select>

  <delete id="deleteReferencesTo" parameterType="String">
    DELETE FROM portfolio_references
    WHERE reference_uuid =  #{referenceUuid,jdbcType=VARCHAR}
  </delete>

  <sql id="deleteProjectsQuery">
    DELETE FROM portfolio_proj_branches
    WHERE portfolio_project_uuid in
    (SELECT uuid FROM portfolio_projects
    WHERE portfolio_uuid = #{portfolioUuid,jdbcType=VARCHAR});

    DELETE FROM portfolio_projects
    WHERE portfolio_uuid = #{portfolioUuid,jdbcType=VARCHAR};
  </sql>

  <delete id="deleteProjects" parameterType="String">
    <include refid="deleteProjectsQuery"/>
  </delete>

  <delete id="deleteProjects" parameterType="String" databaseId="oracle">
    BEGIN
    <include refid="deleteProjectsQuery"/>
    END;
  </delete>

  <sql id="deleteProjectQuery">
    DELETE FROM portfolio_proj_branches
    WHERE portfolio_project_uuid =
    (SELECT uuid FROM portfolio_projects
    WHERE portfolio_uuid = #{portfolioUuid,jdbcType=VARCHAR}
    AND project_uuid = #{projectUuid,jdbcType=VARCHAR});

    DELETE FROM portfolio_projects
    WHERE portfolio_uuid = #{portfolioUuid,jdbcType=VARCHAR}
    AND project_uuid = #{projectUuid,jdbcType=VARCHAR};
  </sql>

  <delete id="deleteProject" parameterType="map">
    <include refid="deleteProjectQuery"/>
  </delete>

  <delete id="deleteProject" parameterType="map" databaseId="oracle">
    BEGIN
    <include refid="deleteProjectQuery"/>
    END;
  </delete>

  <insert id="insertProject" parameterType="map">
    INSERT INTO portfolio_projects (
      uuid,
      portfolio_uuid,
      project_uuid,
      created_at
    )
    VALUES (
    #{uuid,jdbcType=VARCHAR},
    #{portfolioUuid,jdbcType=VARCHAR},
    #{projectUuid,jdbcType=VARCHAR},
    #{createdAt,jdbcType=BIGINT}
    )
  </insert>

  <insert id="insertBranch" parameterType="map">
    INSERT INTO portfolio_proj_branches (
      uuid,
      portfolio_project_uuid,
      branch_uuid,
      created_at
    )
    VALUES (
      #{uuid,jdbcType=VARCHAR},
      #{portfolioProjectUuid,jdbcType=VARCHAR},
      #{branchUuid,jdbcType=VARCHAR},
      #{createdAt,jdbcType=BIGINT}
    )
  </insert>

  <delete id="deleteBranch" parameterType="map">
    DELETE FROM portfolio_proj_branches
    WHERE portfolio_project_uuid =
      (SELECT uuid FROM portfolio_projects
      WHERE portfolio_uuid = #{portfolioUuid,jdbcType=VARCHAR}
      AND project_uuid = #{projectUuid,jdbcType=VARCHAR})
      AND branch_uuid = #{branchUuid,jdbcType=VARCHAR}
  </delete>

  <update id="update" parameterType="Portfolio">
    UPDATE portfolios SET
    name = #{name,jdbcType=VARCHAR},
    description = #{description,jdbcType=VARCHAR},
    selection_mode = #{selectionMode,jdbcType=VARCHAR},
    selection_expression = #{selectionExpression,jdbcType=VARCHAR},
    parent_uuid = #{parentUuid,jdbcType=VARCHAR},
    branch_key = #{branchKey,jdbcType=VARCHAR},
    root_uuid = #{rootUuid,jdbcType=VARCHAR},
    updated_at = #{updatedAt,jdbcType=BIGINT}
    WHERE
    uuid = #{uuid,jdbcType=VARCHAR}
  </update>

  <update id="updateVisibilityByPortfolioUuid">
    UPDATE portfolios SET
    private = #{newIsPrivate,jdbcType=BOOLEAN}
    WHERE
    uuid = #{uuid,jdbcType=VARCHAR}
  </update>
</mapper>
