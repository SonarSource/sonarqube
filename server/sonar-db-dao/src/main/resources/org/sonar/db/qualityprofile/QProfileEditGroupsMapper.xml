<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd">

<mapper namespace="org.sonar.db.qualityprofile.QProfileEditGroupsMapper">

  <sql id="sqlColumns">
    qeg.uuid as "uuid",
    qeg.group_uuid as "groupUuid",
    qeg.qprofile_uuid as "qProfileUuid"
  </sql>

  <select id="selectByQProfileAndGroups" parameterType="map" resultType="org.sonar.db.qualityprofile.QProfileEditGroupsDto">
    select
    <include refid="sqlColumns"/>
    from qprofile_edit_groups qeg
    where
    <foreach collection="groupUuids" open="(" close=")" item="groupUuid" separator=" or ">
      qeg.group_uuid = #{groupUuid, jdbcType=VARCHAR}
    </foreach>
    and qeg.qprofile_uuid = #{qProfileUuid, jdbcType=VARCHAR}
  </select>

  <select id="countByQuery" resultType="int">
    select count(g.uuid)
    <include refid="sqlSelectByQuery" />
  </select>

  <select id="selectByQuery" parameterType="map" resultType="org.sonar.db.user.SearchGroupMembershipDto">
    SELECT g.uuid as groupUuid, g.name as name, qeg.uuid as uuid
    <include refid="sqlSelectByQuery"/>
    ORDER BY g.name ASC
    LIMIT #{pagination.pageSize,jdbcType=INTEGER}
    OFFSET #{pagination.offset,jdbcType=INTEGER}
  </select>

  <select id="selectByQuery" parameterType="map" resultType="org.sonar.db.user.SearchGroupMembershipDto" databaseId="mssql">
    select * from (
    select row_number() over(order by g.name asc) as number,
      g.uuid as groupUuid, g.name as name, qeg.uuid as uuid
      <include refid="sqlSelectByQuery" />
    ) as query
    where
    query.number between #{pagination.startRowNumber,jdbcType=INTEGER} and #{pagination.endRowNumber,jdbcType=INTEGER}
    order by query.name asc
  </select>

  <select id="selectByQuery" parameterType="map" resultType="org.sonar.db.user.SearchGroupMembershipDto" databaseId="oracle">
    select * from (
      select rownum as rn, t.* from (
        select g.uuid as groupUuid, g.name as name, qeg.uuid as uuid
        <include refid="sqlSelectByQuery"/>
        order by g.name ASC
      ) t
    ) t
    where
    t.rn between #{pagination.startRowNumber,jdbcType=INTEGER} and #{pagination.endRowNumber,jdbcType=INTEGER}
  </select>

  <sql id="sqlSelectByQuery">
    FROM groups g
    LEFT JOIN qprofile_edit_groups qeg ON qeg.group_uuid=g.uuid AND qeg.qprofile_uuid=#{query.qProfileUuid, jdbcType=VARCHAR}
    <where>
      AND g.organization_uuid=#{query.organizationUuid,jdbcType=VARCHAR}
      <choose>
        <when test="query.getMembership() == 'IN'">
          AND qeg.uuid IS NOT NULL
        </when>
        <when test="query.getMembership() == 'OUT'">
          AND qeg.uuid IS NULL
        </when>
      </choose>
      <if test="query.getQuery() != null">
        AND (LOWER(g.name) LIKE #{query.querySqlLowercase} ESCAPE '/')
      </if>
    </where>
  </sql>

  <select id="selectQProfileUuidsByOrganizationAndGroups" parameterType="map" resultType="string">
    select distinct qeg.qprofile_uuid as qProfileUuid
    from qprofile_edit_groups qeg
    inner join org_qprofiles oq on qeg.qprofile_uuid=oq.uuid and oq.organization_uuid=#{organizationUuid, jdbcType=VARCHAR}
    <where>
      qeg.group_uuid in <foreach collection="groupUuids" open="(" close=")" item="groupUuid" separator=",">#{groupUuid, jdbcType=VARCHAR}</foreach>
    </where>
  </select>

  <insert id="insert" useGeneratedKeys="false" parameterType="map">
    insert into qprofile_edit_groups(
    uuid,
    group_uuid,
    qprofile_uuid,
    created_at
    ) values (
    #{dto.uuid, jdbcType=VARCHAR},
    #{dto.groupUuid, jdbcType=VARCHAR},
    #{dto.qProfileUuid, jdbcType=VARCHAR},
    #{now, jdbcType=BIGINT}
    )
  </insert>

  <delete id="delete" parameterType="map">
    delete from qprofile_edit_groups
    where qprofile_uuid = #{qProfileUuid, jdbcType=VARCHAR}
    and group_uuid = #{groupUuid, jdbcType=VARCHAR}
  </delete>

  <delete id="deleteByQProfiles" parameterType="map">
    delete from qprofile_edit_groups
    where qprofile_uuid in <foreach collection="qProfileUuids" open="(" close=")" item="qProfileUuid" separator=",">#{qProfileUuid, jdbcType=VARCHAR}</foreach>
  </delete>

  <delete id="deleteByGroup" parameterType="map">
    delete from qprofile_edit_groups
    where group_uuid = #{groupUuid, jdbcType=VARCHAR}
  </delete>

</mapper>

