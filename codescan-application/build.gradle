import org.sonar.build.LicenseReader

plugins {
  id "com.github.hierynomus.license-report"
  id "com.github.johnrengelman.shadow"
  id "de.undercouch.download"
  id "org.cyclonedx.bom"
}

sonar {
  properties {
    property 'sonar.projectName', "${projectTitle} :: Application"
  }
}

configurations {
  zip
  scanner
  web
  shutdowner
  jdbc_postgresql {
    transitive = false
  }
  bundledPlugin {
    transitive = false
  }
  bundledPlugin_deps {
    extendsFrom bundledPlugin
    transitive = true
  }
  appLicenses.extendsFrom(api, web, scanner, jdbc_postgresql, bundledPlugin_deps)
  cyclonedx
}

jar.enabled = false
shadowJar {
  archiveBaseName = 'codescan-application'
  archiveClassifier = null
  mergeServiceFiles()
  zip64 true
  manifest {
    attributes('Main-Class': 'org.sonar.application.App')
  }
}

dependencies {
    // please keep list ordered
    api 'org.slf4j:slf4j-api'

    api 'org.elasticsearch.client:elasticsearch-rest-high-level-client'
    api 'org.sonarsource.api.plugin:sonar-plugin-api'
    api project(':server:sonar-ce')
    api project(':server:sonar-main')
    api project(':server:sonar-process')
    api project(':server:sonar-webserver')
    api project(':sonar-core')
    api project(':sonar-plugin-api-impl')

    compileOnlyApi 'com.github.spotbugs:spotbugs-annotations'

    scanner project(path: ':sonar-scanner-engine-shaded', configuration: 'shadow')
    cyclonedx project(path: ':sonar-scanner-engine-shaded')
    web project(':server:sonar-web')
    shutdowner project(':sonar-shutdowner')

    jdbc_postgresql 'org.postgresql:postgresql'
}

// declare dependencies in configuration bundledPlugin to be packaged in lib/extensions
apply from: 'bundled_plugins.gradle'

downloadLicenses {
  dependencyConfiguration = 'appLicenses'
}

task zip(type: Zip, dependsOn: [configurations.compileClasspath]) {
  duplicatesStrategy DuplicatesStrategy.EXCLUDE
  def archiveDir = "sonarqube-$versionWithoutBuildNumber"

  if(release) {
    dependsOn tasks.downloadLicenses
    into("${archiveDir}/") {
      from(tasks.downloadLicenses.outputs) {
        include 'dependency-license.json'
        filter(LicenseReader)
      }
    }
  }

  into("${archiveDir}/lib/extensions/") {
    from configurations.bundledPlugin
  }
  into("${archiveDir}/lib/scanner/") {
    from configurations.scanner
  }
  into("${archiveDir}/lib/") {
    from shadowJar
  }
  into("${archiveDir}/web/") {
    duplicatesStrategy DuplicatesStrategy.FAIL
    // FIXME use configurations.web with correct artifacts
    from(tasks.getByPath(':server:sonar-web:yarn_run').outputs) { a ->
      if (official) {
         project(':private:branding').fileTree('src').visit { b ->
           if (!b.isDirectory()) {
             a.exclude b.relativePath.toString()
           }
         }
      }
    }
    if (official) {
      from project(':private:branding').file('src')
    }
  }
  into("${archiveDir}/lib/jdbc/postgresql/") {
    from configurations.jdbc_postgresql
  }
  into("${archiveDir}/lib/") {
    from configurations.shutdowner
  }
}

// Check the size of the archive
zip {
  mustRunAfter cyclonedxBom
  doLast {
    //When the archive size increases due to dependencies, the expected size should be updated as well.
    //Bump the expected size by at least 10 more megabytes than what is strictly needed, this in conjunction with the
    //tolerance will allow for some growth in the archive size.
    def expectedSize = 300_000_000
    //We set a tolerance of 15MB to avoid failing the build for small differences in the archive size.
    def tolerance = 30_000_000
    def minArchiveSize = expectedSize - tolerance
    def maxArchiveSize = expectedSize + tolerance

    def archiveSize = archiveFile.get().asFile.length()
    if (archiveSize < minArchiveSize)
      throw new GradleException("${archiveFileName.get()} size ($archiveSize) too small. Min is $minArchiveSize")
    if (archiveSize > maxArchiveSize)
      throw new GradleException("${destinationDirectory.get()}/${archiveFileName.get()} size ($archiveSize) too large. Max is $maxArchiveSize")
  }
}
assemble.dependsOn zip

// the script start.sh unpacks OSS distribution into $buildDir/distributions/sonarqube-oss.
// This directory should be deleted when the zip is changed.
task cleanLocalUnzippedDir(dependsOn: zip) {
  def unzippedDir = file("$buildDir/distributions/sonarqube-$versionWithoutBuildNumber")
  inputs.files(file("$buildDir/distributions/sonar-application-${versionWithoutBuildNumber}.zip"))
  outputs.upToDateWhen { true }

  doLast {
    println("delete directory ${unzippedDir}")

  }
}
assemble.dependsOn cleanLocalUnzippedDir

artifacts { zip zip }

artifactoryPublish.skip = false

def bomFile = layout.buildDirectory.file('reports/bom.json')
cyclonedxBom {
  includeConfigs = ["runtimeClasspath", "web", "shutdowner", "jdbc_postgresql", "bundledPlugin_deps",
                     "cyclonedx"]
  outputs.file bomFile
}
tasks.cyclonedxBom {
  inputs.files(configurations.runtimeClasspath, configurations.shutdowner,
          configurations.jdbc_postgresql, configurations.bundledPlugin_deps, configurations.cyclonedx)
}
def bomArtifact = artifacts.add('archives', bomFile.get().asFile) {
  type 'json'
  classifier 'cyclonedx'
  builtBy 'cyclonedxBom'
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact zip
    }
    if (enableBom) {
      mavenJava(MavenPublication) {
        artifact bomArtifact
      }
    }
  }
}
